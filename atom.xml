<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XueCat</title>
  <subtitle>用代码创造世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xuecat.github.io/"/>
  <updated>2018-02-28T16:29:07.812Z</updated>
  <id>https://xuecat.github.io/</id>
  
  <author>
    <name>XueCat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c#杂项笔记(230)</title>
    <link href="https://xuecat.github.io/2018/02/28/230/"/>
    <id>https://xuecat.github.io/2018/02/28/230/</id>
    <published>2018-02-28T15:34:14.000Z</published>
    <updated>2018-02-28T16:29:07.812Z</updated>
    
    <content type="html"><![CDATA[<h3 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h3><p> 同步函数执行到async时会同步执行,当在async里遇见await时，会跳出async函数到外部继续执行。<br> await执行完了后再执行async里面await之后的代码</p>
<p> async函数由于返回的是task类型，注意属性有同步类型</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;async-await&quot;&gt;&lt;a href=&quot;#async-await&quot; class=&quot;headerlink&quot; title=&quot;async await&quot;&gt;&lt;/a&gt;async await&lt;/h3&gt;&lt;p&gt; 同步函数执行到async时会同步执行,当在async里遇见awai
    
    </summary>
    
      <category term="C#" scheme="https://xuecat.github.io/categories/C/"/>
    
    
      <category term="杂项" scheme="https://xuecat.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
      <category term="代码编写" scheme="https://xuecat.github.io/tags/%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>JS札记——网上看的装逼写法(229)</title>
    <link href="https://xuecat.github.io/2018/01/25/229/"/>
    <id>https://xuecat.github.io/2018/01/25/229/</id>
    <published>2018-01-25T12:54:28.000Z</published>
    <updated>2018-01-30T14:20:00.815Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/picture/229.jpg" alt=""></p>
<h3 id="JS札记"><a href="#JS札记" class="headerlink" title="JS札记"></a>JS札记</h3><p> 数字取整:<br> <code>~~</code> 其实这是个按位非的运算符做了俩次<br> <code>2.33|0</code><br> <code>2.33&gt;&gt;0</code></p>
<p> 字符转数字:<br> <code>var a =&#39;1&#39;; +a;</code> 它用隐式转换来的</p>
<p> 类型判断:<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> d == <span class="string">"string"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">d <span class="keyword">instanceof</span> Person;<span class="comment">//判断constructor.prototype是否存在于要检测对象的原型链上. 所以对number string boolean无效</span></div></pre></td></tr></table></figure></p>
<p> parseInt范围:<br> <code>parseInt(0.0000008)</code>//这个结果是8, 小数点后7位出错<br> <code>parseInt(10000000000023291)</code>//20位出错</p>
<p> 数组去重:<br> <code>[...new Set([1, &quot;1&quot;, 2, 1, 1, 3])]</code></p>
<p> 指定长度填充:<br> 以前就在想了，赶紧笔记: <code>let aa = Array(6).fill(8)</code> 长度6,填充8</p>
<p> 短路表达式:<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = b&amp;&amp;<span class="number">1</span>; <span class="keyword">if</span> (b) a=<span class="number">1</span>; <span class="keyword">else</span> a=b;</div><div class="line"><span class="keyword">var</span> a = b||<span class="number">1</span>; <span class="keyword">if</span> (b) a=b; <span class="keyword">else</span> a=<span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<p> 高逼格创建函数:<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'a++; return a+1;'</span>);</div><div class="line">f(<span class="number">1</span>)<span class="comment">//3</span></div><div class="line"><span class="comment">//函数字符化</span></div></pre></td></tr></table></figure></p>
<p> 立即执行函数:<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)();</div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;();</div><div class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;();</div><div class="line">-<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;();</div><div class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;();</div></pre></td></tr></table></figure></p>
<h3 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h3><ol>
<li>xss安全，对url和内容做过滤，防止嵌入js执行代码</li>
<li>csp, 通过服务器应答头或者html的<code>META</code>标签,限制请求源</li>
</ol>
<h3 id="浏览器Console命令"><a href="#浏览器Console命令" class="headerlink" title="浏览器Console命令"></a>浏览器Console命令</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log();</div><div class="line"><span class="built_in">console</span>.dir();<span class="comment">//显示一个对象所有属性和方法</span></div><div class="line"><span class="built_in">console</span>.dirxml();<span class="comment">//显示网页某节点所包含的html/xml</span></div><div class="line"><span class="built_in">console</span>.assert();<span class="comment">//弹框</span></div><div class="line"><span class="built_in">console</span>.trace();<span class="comment">//附带显示行数</span></div><div class="line"><span class="built_in">console</span>.time();<span class="built_in">console</span>.timeEnd();用来显示代码运行时间</div></pre></td></tr></table></figure>
<h3 id="浏览器其它"><a href="#浏览器其它" class="headerlink" title="浏览器其它"></a>浏览器其它</h3><p> 浏览器能设置条件语句断点<br> 左边可以直接启动手机模式,这样就能看手机状态下的浏览情况</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/picture/229.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;JS札记&quot;&gt;&lt;a href=&quot;#JS札记&quot; class=&quot;headerlink&quot; title=&quot;JS札记&quot;&gt;&lt;/a&gt;JS札记&lt;/h3&gt;&lt;p&gt; 数字取整:&lt;br&gt; &lt;code&gt;~~
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="JS" scheme="https://xuecat.github.io/tags/JS/"/>
    
      <category term="学习看书笔记" scheme="https://xuecat.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9C%8B%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>react插件(228)</title>
    <link href="https://xuecat.github.io/2017/12/25/228/"/>
    <id>https://xuecat.github.io/2017/12/25/228/</id>
    <published>2017-12-25T15:02:02.000Z</published>
    <updated>2018-01-25T12:52:55.326Z</updated>
    
    <content type="html"><![CDATA[<h3 id="react-thunk"><a href="#react-thunk" class="headerlink" title="react-thunk"></a>react-thunk</h3><p> 我一开始觉得把<code>props.dispatch</code>当参数传总会异步的，但是当多个时就会分不清。</p>
<ol>
<li>只有<code>store</code>的<code>dispatch</code>后面才能跟<code>then</code>，其它都不能</li>
<li><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">tt</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dis</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> tt = dis(addTodo(<span class="string">'wangqiu'</span>));<span class="comment">//函数出入的参数就是dispatch，所以以次来异步发action</span></div><div class="line">    <span class="keyword">return</span> dis(toggleTodo(tt));</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">   &lt;TodoList</div><div class="line">          todos=&#123;visibleTodos&#125;</div><div class="line">          onTodoClick=&#123;index =&gt;</div><div class="line">            &#123;dispatch(test(index))&#125;<span class="comment">//普遍做法如此，给dispatch传个函数进去</span></div><div class="line">          &#125; /&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="immutable"><a href="#immutable" class="headerlink" title="immutable"></a>immutable</h3><p> <code>https://www.w3cplus.com/javascript/immutable-js.html</code></p>
<h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p> 最近看<code>react-redux</code>,<br> <code>connect</code>中的参数有<code>mapStateToProps</code>和<code>mapDispatchToProps</code>,剩下俩个不说,<br> 他们第二个参数<code>ownProps</code>,指的是当前组件的属性<br> 它指的是<code>mapStateToProps</code>之外的属性(即通过xml属性传递的属性),state转prop后自己是能访问到的。</p>
<h4 id="redux-actions"><a href="#redux-actions" class="headerlink" title="redux-actions"></a>redux-actions</h4><p> createAction<br> 以前:<br> <code>const startAction = () =&gt; ({type:START})</code><br> 使用:<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;createAction&#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div><div class="line"><span class="keyword">const</span> startAction = createAction(START);</div></pre></td></tr></table></figure></p>
<p> handleactions<br> 以前:<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">state=defaultState, action</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span>(action.type) &#123;</div><div class="line">        <span class="keyword">case</span> START : &#123;<span class="keyword">return</span> &#123;...state, runStatus:<span class="literal">true</span>&#125;&#125;;<span class="comment">//es6的解构太方便了，会直接覆盖</span></div><div class="line">        <span class="keyword">case</span> STOP: &#123;<span class="keyword">return</span> &#123;...state, runStatus:<span class="literal">false</span>&#125;&#125;;<span class="comment">//同名属性覆盖</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 使用:<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;handleActions&#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div><div class="line"><span class="keyword">const</span> time = handleActions(&#123;</div><div class="line">    START:(state, action) =&gt; (&#123;...state, runStatus:<span class="literal">true</span>&#125;),</div><div class="line">    STOP:(state, action) =&gt; (&#123;...state, runStatus:<span class="literal">false</span>&#125;),</div><div class="line">&#125;, defaultState);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;react-thunk&quot;&gt;&lt;a href=&quot;#react-thunk&quot; class=&quot;headerlink&quot; title=&quot;react-thunk&quot;&gt;&lt;/a&gt;react-thunk&lt;/h3&gt;&lt;p&gt; 我一开始觉得把&lt;code&gt;props.dispatch&lt;/code
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="JS" scheme="https://xuecat.github.io/tags/JS/"/>
    
      <category term="react" scheme="https://xuecat.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>c++11左右值 (226)</title>
    <link href="https://xuecat.github.io/2017/12/18/226/"/>
    <id>https://xuecat.github.io/2017/12/18/226/</id>
    <published>2017-12-18T12:15:38.000Z</published>
    <updated>2017-12-20T15:09:39.470Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-左右值"><a href="#C-左右值" class="headerlink" title="C++左右值"></a>C++左右值</h3><p> 左值指即能出现等号左边，也能出现在右边的变量（通常指有变量名的值）<br> 右值值只能出现等号右边的值（通常指无变量名的值，函数返回和表达式，常量——不跟对象关联的常量）<br> c++11在上面右值多个将亡值<br><code>move</code>右转左 <code>forward</code>左转右</p>
 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">MyClass <span class="title">fun</span> <span class="params">()</span> </span>&#123;MyClass <span class="keyword">return</span> s;&#125;</div><div class="line">MyClass s= fun();</div><div class="line">MyClass&amp; s = fun();</div><div class="line">MyClass&amp;&amp; s = fun();<span class="comment">//这三个全是调用移动构造函数</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;C-左右值&quot;&gt;&lt;a href=&quot;#C-左右值&quot; class=&quot;headerlink&quot; title=&quot;C++左右值&quot;&gt;&lt;/a&gt;C++左右值&lt;/h3&gt;&lt;p&gt; 左值指即能出现等号左边，也能出现在右边的变量（通常指有变量名的值）&lt;br&gt; 右值值只能出现等号右边的值（通常指
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
      <category term="函数和结构" scheme="https://xuecat.github.io/tags/%E5%87%BD%E6%95%B0%E5%92%8C%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>JS继承和函数式编程的curry等(227)</title>
    <link href="https://xuecat.github.io/2017/12/18/227/"/>
    <id>https://xuecat.github.io/2017/12/18/227/</id>
    <published>2017-12-18T12:15:38.000Z</published>
    <updated>2018-01-30T14:18:53.538Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/picture/227.jpg" alt=""></p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><ul>
<li>每个函数对象有个一个<code>prototype</code>(显式原型),指向<code>constructor</code>;但<code>constructor.prototype</code>指向本身.</li>
<li>实例只有<code>__proto__</code>(隐式原型)</li>
<li>所有实例需要共享的属性和方法,都可放在<code>prototype</code>;不需要则放在构造函数中</li>
<li>实例的<code>__proto__</code>指向构造该对象的构造函数的原型即<code>**.prototype</code></li>
</ul>
<h3 id="es5-6种继承"><a href="#es5-6种继承" class="headerlink" title="es5 6种继承"></a>es5 6种继承</h3><p><strong>来自原型对象的引用属性是所有实例共享的</strong></p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.val = <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>.arr = [<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>简单链</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Sub.prototype = <span class="keyword">new</span> Super();<span class="comment">//共享原型对象，arr是引用类型</span></div><div class="line"><span class="keyword">var</span> sub1 = <span class="keyword">new</span> Sub();</div><div class="line"><span class="keyword">var</span> sub2 = <span class="keyword">new</span> Sub();</div><div class="line"></div><div class="line"><span class="comment">//1.无法构造函数传参</span></div><div class="line">sub1.val = <span class="number">2</span>;<span class="comment">//不会影响sub2</span></div><div class="line">sub1.arr.push(<span class="number">2</span>);<span class="comment">//会影响sub2</span></div></pre></td></tr></table></figure>
<p> <strong>补充</strong><br>  对继承的简单链原理补充<br>我一直在想那样的影响为何有,今天想通了,来做点笔记</p>
<p><strong>补充:</strong> <br></p>
<ul>
<li>call: 替换上下文,可以想象成替换<code>this</code></li>
<li>new:<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj  = &#123;&#125;;</div><div class="line">obj.__proto__ = Base.prototype;</div><div class="line">Base.call(obj);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在<code>call</code>替换后，它还会再调用一遍<code>Base</code>函数,保证有成员变量</p>
<p><strong>过程分析:</strong><br></p>
<ul>
<li>第一行的<code>new Super</code>直接导致<code>Sub.prototype</code>拥有了<code>val</code>和<code>arr</code></li>
<li>二三行的<code>new Sub</code>只是将<code>__proto__</code>指向了<code>Sub.prototype</code></li>
</ul>
<p>所以使用<code>sub.val</code> <code>sub.arr</code>却也只是访问<code>Sub.prototype</code>上面的东西而已</p>
<p>如此说来,大家都访问一个东西却为何<code>val</code>不影响呢?<br><br>因为在第6行里是个创建而不是修改</p>
<p>第六行是对<code>sub1</code>创建一个私有属性并赋值<br>第七行是访问<code>sub1</code>的<code>arr</code>,然而没有从原型链上拿去了</p>
<ul>
<li>简单链很好,就怕某地出错,记住它们是访问一个</li>
<li>借用构造函数这个太浪费了不考虑</li>
<li>new的数量不是很多倒是可以用用组合继承</li>
</ul>
</li>
<li><p>借用构造函数</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>) </span>&#123;...&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">    Super.call(<span class="keyword">this</span>, val); <span class="comment">//1.子类互不影响 2.但是复制了父类实例属性导致内存增加 3.call不会复制原型链</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> sub1 = <span class="keyword">new</span> Sub();</div></pre></td></tr></table></figure>
</li>
<li><p>组合继承</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>) </span>&#123;...&#125;</div><div class="line"></div><div class="line">Super.prototype.fun1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;<span class="comment">//函数全放入原型中，方便共享</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">    Super.call(<span class="keyword">this</span>, val);<span class="comment">//保留传参功能</span></div><div class="line">&#125;</div><div class="line">Sub.prototype = <span class="keyword">new</span> Super();<span class="comment">//1. 函数复用 2.构造函数传参 3.原型多余内存</span></div><div class="line"><span class="keyword">var</span> sub1 = <span class="keyword">new</span> Sub(<span class="number">1</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>寄生组合继承</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>) </span>&#123;...&#125;</div><div class="line">Super.prototype.fun1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">    Super.call(<span class="keyword">this</span>, val);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">beget</span>(<span class="params">obj</span>) </span>&#123; <span class="comment">//构建只有原型链的空对象</span></div><div class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    F.prototype = obj;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> proto = beget(Super.prototype);</div><div class="line">proto.constructor = Sub;</div><div class="line">Sub.prototype = proto;</div><div class="line"></div><div class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> Sub();<span class="comment">//1.确实解决了以上所有问题 2.书写太麻烦了</span></div></pre></td></tr></table></figure>
</li>
<li><p>原型(感觉没意义)</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">beget</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    F.prototype = obj;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> sup = <span class="keyword">new</span> Super();</div><div class="line"><span class="keyword">var</span> sub = beget(sup);</div><div class="line">sub.v = v;</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="es6继承"><a href="#es6继承" class="headerlink" title="es6继承"></a>es6继承</h3><p>上面的<code>寄生组合继承</code>同，多个<code>static</code>定义静态属性</p>
<h3 id="Curry"><a href="#Curry" class="headerlink" title="Curry"></a>Curry</h3><p> 这个概念是存储传入参数，够了才执行函数<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fun = a=&gt; b=&gt; c=&gt; &#123;<span class="keyword">return</span> a+b+c&#125;<span class="comment">//注意return</span></div><div class="line"><span class="keyword">let</span> fun1 = fun(<span class="number">1</span>)<span class="comment">//存储函数</span></div><div class="line"><span class="keyword">let</span> fun2 = fun1(<span class="number">2</span>);</div><div class="line"><span class="keyword">let</span> fun3 = fun2(<span class="number">3</span>);<span class="comment">//6</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> fun1 = fun(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)<span class="comment">//6, 参数多了会报错</span></div></pre></td></tr></table></figure></p>
<h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p>  这个es6并没有实现，但是很多库有这个函数<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greeting = (firstName, lastName) =&gt; <span class="string">'hello, '</span> + firstName + <span class="string">' '</span> + lastName</div><div class="line"><span class="keyword">var</span> toUpper = str =&gt; str.toUpperCase()</div><div class="line"><span class="keyword">var</span> fn = compose(toUpper, greeting)</div><div class="line"><span class="built_in">console</span>.log(fn(<span class="string">'jack'</span>, <span class="string">'smith'</span>))</div><div class="line"><span class="comment">// ‘HELLO，JACK SMITH’</span></div></pre></td></tr></table></figure></p>
<ul>
<li>compose的参数是函数，返回的也是一个函数</li>
<li>因为除了第一个函数的接受参数，其他函数的接受参数都是上一个函数的返回值，所以初始函数的参数是多元的，而其他函数的接受值是一元的</li>
<li>compsoe函数可以接受任意的参数，所有的参数都是函数，且执行方向是自右向左的，初始函数一定放到参数的最右面</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/picture/227.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;原型链&quot;&gt;&lt;a href=&quot;#原型链&quot; class=&quot;headerlink&quot; title=&quot;原型链&quot;&gt;&lt;/a&gt;原型链&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每个函数对象有个一个&lt;code&gt;p
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="JS" scheme="https://xuecat.github.io/tags/JS/"/>
    
      <category term="学习看书笔记" scheme="https://xuecat.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9C%8B%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>c++函数指针模板又一次说明(225)</title>
    <link href="https://xuecat.github.io/2017/10/26/225/"/>
    <id>https://xuecat.github.io/2017/10/26/225/</id>
    <published>2017-10-26T15:50:30.000Z</published>
    <updated>2017-11-13T13:15:50.421Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/picture/225.jpg" alt=""></p>
<h3 id="函数指针又一次说明"><a href="#函数指针又一次说明" class="headerlink" title="函数指针又一次说明"></a>函数指针又一次说明</h3><p>今天看rapidjson的源码，看到一句默认操作符转换函数指针的代码懵逼了居然。。<br>好歹也是读了十来本c++的书了，还这么2。<br>顺便做笔记。</p>
<ul>
<li>按照effictive说法，结构体比函数指针快。所以用<code>operator()</code>代替函数指针</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//我按照它代码的写法，尝试了下。感觉默认指针函数只能用在if语句上来走个默认转换</span></div><div class="line"><span class="keyword">struct</span> Prs &#123;</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">bool</span> <span class="params">(Prs::*Boolt)</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="keyword">bool</span> m_bR;</div><div class="line">  <span class="function"><span class="keyword">operator</span> <span class="title">Boolt</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> !IsEr() ? &amp;Prs::IsEr : <span class="literal">NULL</span>;</div><div class="line">  &#125;;</div><div class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">IsEr</span><span class="params">()</span> <span class="keyword">const</span> </span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">return</span> m_bR == <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ah</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, Prs &amp;f, Prs::Boolt df)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> ((f.*df)())</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> a-b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Prs d;</div><div class="line">d.m_bR = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (d)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> f = ah(<span class="number">1</span>, <span class="number">2</span>, d, d);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用函数指针这个看上去没有创建对象，其实是初始化了一个临时对象再来调用它的operator()函数</span></div><div class="line"><span class="comment">//感觉用这个方法方便点</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TR, <span class="keyword">typename</span> TP&gt;</div><div class="line"><span class="keyword">struct</span> PrsT &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="function">TR <span class="title">operator</span><span class="params">()</span> <span class="params">(TP a, TP b)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> a+b;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TR, <span class="keyword">typename</span> TP, <span class="keyword">typename</span> Fun&gt;</div><div class="line"><span class="function">TR <span class="title">aht</span><span class="params">(TR a, TP b, Fun f)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> f(a, b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Prs &#123;</div><div class="line">	<span class="function"><span class="keyword">typedef</span> <span class="title">bool</span> <span class="params">(Prs::*Boolt)</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="keyword">bool</span> m_bR;</div><div class="line">	<span class="function"><span class="keyword">operator</span> <span class="title">Boolt</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> !IsEr() ? &amp;Prs::IsEr : <span class="literal">NULL</span>;</div><div class="line">	&#125;;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">IsEr</span><span class="params">()</span> <span class="keyword">const</span> </span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> m_bR == <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ff = aht(<span class="number">1</span>, <span class="number">2</span>, PrsT&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;());</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/picture/225.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;函数指针又一次说明&quot;&gt;&lt;a href=&quot;#函数指针又一次说明&quot; class=&quot;headerlink&quot; title=&quot;函数指针又一次说明&quot;&gt;&lt;/a&gt;函数指针又一次说明&lt;/h3&gt;&lt;p
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
      <category term="指针" scheme="https://xuecat.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>React再次学习(224)</title>
    <link href="https://xuecat.github.io/2017/08/29/224/"/>
    <id>https://xuecat.github.io/2017/08/29/224/</id>
    <published>2017-08-29T13:45:08.000Z</published>
    <updated>2017-11-13T13:15:58.535Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/picture/224.jpg" alt=""></p>
<h3 id="ref的使用"><a href="#ref的使用" class="headerlink" title="ref的使用"></a>ref的使用</h3><p>这是react对<code>render</code>中元素提供的一个属性，专门用来标志<code>mount</code>后的元素<br>这个回调属性会在组件安装后立即执行。</p>
<h4 id="ref字符"><a href="#ref字符" class="headerlink" title="ref字符"></a>ref字符</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"theInput"</span>/&gt;</span> //通过这个属性来对一个dom设置标志符</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">React.findDOMNode(<span class="keyword">this</span>.refs.theInput).focus();<span class="comment">//再通过这个方法来达到访问实体化dom的效果</span></div></pre></td></tr></table></figure>
<h4 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h4><p>当它作为函数时，默认参数就是一个dom的对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">TextInput</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt;</span> this._input = c&#125; /&gt;;//由于安装后立即执行，能得到对象</span></div><div class="line">&#125;,</div><div class="line">componentDidMount: function() &#123;</div><div class="line">   this._input.focus();//对对象操作</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<h3 id="bind和this"><a href="#bind和this" class="headerlink" title="bind和this"></a>bind和this</h3><p> 官方文档中react用bind很多;<br> 但看他们喜欢在构造函数如此： this.handleToggleClick = this.handleToggleClick.bind(this)</p>
<p> 我喜欢用箭头函数(es6特性，this指向定义处)直接调用</p>
<h3 id="JSX嵌入"><a href="#JSX嵌入" class="headerlink" title="JSX嵌入"></a>JSX嵌入</h3>  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//jsx嵌入任何表达式</div><div class="line">&lt;div&gt;</div><div class="line">  &lt;h1&gt;Hello!&lt;/h1&gt;</div><div class="line">  &#123;unreadMessages.length &gt; 0 &amp;&amp;</div><div class="line">    &lt;h2&gt;</div><div class="line">      You have &#123;unreadMessages.length&#125; unread messages.</div><div class="line">    &lt;/h2&gt;</div><div class="line">  &#125;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">//三目运算符</div><div class="line">&lt;div&gt;</div><div class="line">  The user is &lt;b&gt;&#123;isLoggedIn ? 'currently' : 'not'&#125;&lt;/b&gt; logged in.</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> components = &#123;</div><div class="line">  photo: PhotoStory,</div><div class="line">  video: VideoStory</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Story</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="comment">// Correct! JSX type can be a capitalized variable.</span></div><div class="line">  <span class="keyword">const</span> SpecificStory = components[props.storyType];</div><div class="line">  <span class="keyword">return</span> &lt;SpecificStory story=&#123;props.story&#125; /&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//默认值</div><div class="line">&lt;MyTextBox autocomplete /&gt;//它会默认传true的，但是官方建议不要这么写</div><div class="line"></div><div class="line">//利用es6的解构</div><div class="line">function App1() &#123;</div><div class="line">  return &lt;Greeting firstName="Ben" lastName="Hector" /&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function App2() &#123;</div><div class="line">  const props = &#123;firstName: 'Ben', lastName: 'Hector'&#125;;</div><div class="line">  return &lt;Greeting &#123;...props&#125; /&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="html不接受字符"><a href="#html不接受字符" class="headerlink" title="html不接受字符"></a>html不接受字符</h4>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//有以下俩种方式解决</span></div><div class="line">&lt;MyComponent message=<span class="string">"&amp;lt;3"</span> /&gt;</div><div class="line"></div><div class="line">&lt;MyComponent message=&#123;'&lt;3'&#125; /&gt;</div></pre></td></tr></table></figure>
<h4 id="jsx插入函数"><a href="#jsx插入函数" class="headerlink" title="jsx插入函数"></a>jsx插入函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这种用法太牛逼了，虽然不多见</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Repeat</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> items = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.numTimes; i++) &#123;</div><div class="line">    items.push(props.children(i));<span class="comment">//这里直接调用父类定义的函数，一个一个执行添加</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;items&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListOfTenThings</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Repeat</span> <span class="attr">numTimes</span>=<span class="string">&#123;10&#125;</span>&gt;</span></span></div><div class="line">      &#123;(index) =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>This is item &#123;index&#125; in the list<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">Repeat</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="react-map组件时"><a href="#react-map组件时" class="headerlink" title="react map组件时"></a>react map组件时</h3><ul>
<li>一个元素的key最好是这个元素在<strong>列表</strong>中拥有的一个独一无二的字符串(所以不同数组列表可以用相同key)</li>
<li>元素的key只有在它和它的兄弟节点对比时才有意义(换句话说必须在map函数里面的组件里)</li>
<li>key只对react可见，要用其值，请将作为属性再加个传入</li>
</ul>
<h3 id="计算属性名"><a href="#计算属性名" class="headerlink" title="计算属性名"></a>计算属性名</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//多了个name属性，来对应绑定属性</span></div><div class="line"><span class="comment">//通过</span></div><div class="line"><span class="keyword">this</span>.setState(&#123;[name]: value&#125;);</div><div class="line"><span class="comment">//等同于如下</span></div><div class="line"><span class="keyword">var</span> partState = &#123;&#125;;</div><div class="line">partState[name] = value;</div><div class="line"><span class="keyword">this</span>.setState(partState);</div></pre></td></tr></table></figure>
<h3 id="控制多个元素"><a href="#控制多个元素" class="headerlink" title="控制多个元素"></a>控制多个元素</h3><p> 这个是看了官方的例子，感觉太好用了，笔记下来</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Reservation</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      isGoing: <span class="literal">true</span>,</div><div class="line">      numberOfGuests: <span class="number">2</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.handleInputChange = <span class="keyword">this</span>.handleInputChange.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleInputChange(event) &#123;</div><div class="line">    <span class="keyword">const</span> target = event.target;</div><div class="line">    <span class="keyword">const</span> value = target.type === <span class="string">'checkbox'</span> ? target.checked : target.value;</div><div class="line">    <span class="keyword">const</span> name = target.name;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      [name]: value</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;form&gt;</div><div class="line">        &lt;label&gt;</div><div class="line">          Is going:</div><div class="line">          &lt;input</div><div class="line">            name="isGoing"</div><div class="line">            type="checkbox"</div><div class="line">            checked=&#123;this.state.isGoing&#125;</div><div class="line">            onChange=&#123;this.handleInputChange&#125; /&gt;</div><div class="line">        &lt;/label&gt;</div><div class="line">        &lt;br /&gt;</div><div class="line">        &lt;label&gt;</div><div class="line">          Number of guests:</div><div class="line">          &lt;input</div><div class="line">            name="numberOfGuests"</div><div class="line">            type="number"</div><div class="line">            value=&#123;this.state.numberOfGuests&#125;</div><div class="line">            onChange=&#123;this.handleInputChange&#125; /&gt;</div><div class="line">        &lt;/label&gt;</div><div class="line">      &lt;/form&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ref用于子组件"><a href="#ref用于子组件" class="headerlink" title="ref用于子组件"></a>ref用于子组件</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">CustomTextInput</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;input ref=&#123;props.inputRef&#125; /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Parent extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;CustomTextInput</div><div class="line">        inputRef=&#123;el =&gt; this.inputElement = el&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="突变数据"><a href="#突变数据" class="headerlink" title="突变数据"></a>突变数据</h3><p> 通过<code>shouldComponentUpdate</code>来判断是否渲染组件，有个<code>React.PureComponent</code>可提供继承，它默认填写了<code>shouldComponentUpdate</code>函数，但是里面只是一些浅比较(对像就算被添加属性,对象的地址还是没变,导致比较为true);<br> 深层数据则不行。<br> 所以官方建议是<code>Immutable</code>来配合使用</p>
<h3 id="老式的创建类和es6创建类"><a href="#老式的创建类和es6创建类" class="headerlink" title="老式的创建类和es6创建类"></a>老式的创建类和es6创建类</h3><p> <a href="https://reactjs.org/docs/react-without-es6.html" target="_blank" rel="external">https://reactjs.org/docs/react-without-es6.html</a></p>
<h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p> 这个特性在官方网站上被说明为不建议使用.<br> 优点:<br>  跨越组件层次传递，这简直太好了，不用像<code>props</code>那样一个一个传，直接跨代传都可以<br> 缺点:<br>  这也是官方举例，当state或者setState 被调用,getChildContext也会被调用,生成新的context;<br>  但<code>shouldComponentUpdate</code>返回的 false 会 block 住 context，导致没有更新</p>
<p>  另外context相当一个全局变量，难以追溯修改源.</p>
<p> 虽然官方不建议用，但看网上建议把它当个全局固定值用，避免修改来躲避状态更新失败.</p>
<h3 id="protals"><a href="#protals" class="headerlink" title="protals"></a>protals</h3><p> 当组件需要”跳出”容器(对话框,提示框,<code>overflow:hidden</code> <code>z-index</code>等),此时使用此属性</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/picture/224.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;ref的使用&quot;&gt;&lt;a href=&quot;#ref的使用&quot; class=&quot;headerlink&quot; title=&quot;ref的使用&quot;&gt;&lt;/a&gt;ref的使用&lt;/h3&gt;&lt;p&gt;这是react对&lt;co
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="react" scheme="https://xuecat.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>js的数组(223)</title>
    <link href="https://xuecat.github.io/2017/07/17/223/"/>
    <id>https://xuecat.github.io/2017/07/17/223/</id>
    <published>2017-07-17T15:44:03.000Z</published>
    <updated>2017-11-13T13:16:05.746Z</updated>
    
    <content type="html"><![CDATA[<p>Javascript中的数组对象是一种伪数组的”Array-like”对象，“它把数组的下标转变成字符串，用其作为属性”。<br>声明一个数组：<br>var arr=[1,2,3];<br>然后使用“负索引”<br>arr[-0.5]=100;<br>实际上arr.length值仍然是3，不过arr得到一个键值对为-0.5:100的属性，虽然不能使用小数点取这个属性和值，但方括号是可以用的 arr[-0.5]或arr[‘-0.5’]都可以得到100</p>
<p><code>负数和字符并不影响长度</code><br>数组对象其实是一个特殊对象，他拥有普通对象的全部特性，所以不止负索引，小数索引，连字符串索引都是可以的，只是用这些索引向数组添加属性时，数组的length不会增加罢了，而只有当索引是正整数或其对应数字串时，length才会增加，仅此而已。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Javascript中的数组对象是一种伪数组的”Array-like”对象，“它把数组的下标转变成字符串，用其作为属性”。&lt;br&gt;声明一个数组：&lt;br&gt;var arr=[1,2,3];&lt;br&gt;然后使用“负索引”&lt;br&gt;arr[-0.5]=100;&lt;br&gt;实际上arr.len
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="函数和结构" scheme="https://xuecat.github.io/tags/%E5%87%BD%E6%95%B0%E5%92%8C%E7%BB%93%E6%9E%84/"/>
    
      <category term="JS" scheme="https://xuecat.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>js this/原型/pro(222)</title>
    <link href="https://xuecat.github.io/2017/06/06/222/"/>
    <id>https://xuecat.github.io/2017/06/06/222/</id>
    <published>2017-06-06T13:46:30.000Z</published>
    <updated>2017-07-25T16:01:58.146Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/picture/222.jpg" alt=""></p>
<p>今天看一代码把以前的知识又忘了，现专门记下笔记</p>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><blockquote>
<p>this的上下文环境永远在被调用函数的上下文环境</p>
</blockquote>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var someuser = &#123; </div><div class="line">    name: <span class="string">'byvoid'</span>, </div><div class="line">    <span class="function"><span class="keyword">func</span>: <span class="title">function</span><span class="params">()</span> &#123;</span></div><div class="line">        console.<span class="built_in">log</span>(this.name)<span class="comment">; </span></div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">; </span></div><div class="line">var foo = &#123; </div><div class="line">    name: <span class="string">'foobar'</span></div><div class="line">&#125;<span class="comment">;</span></div><div class="line"> </div><div class="line">someuser.<span class="keyword">func</span>()<span class="comment">; // 输出 byvoid (被调用函数func的上下文是someuser)</span></div><div class="line"> </div><div class="line">foo.<span class="keyword">func</span> = someuser.<span class="keyword">func</span><span class="comment">; </span></div><div class="line">foo.<span class="keyword">func</span>()<span class="comment">; // 输出 foobar (被调用函数func的上下文是foo)</span></div><div class="line"> </div><div class="line">name = <span class="string">'global'</span><span class="comment">;</span></div><div class="line"><span class="function"><span class="keyword">func</span> = <span class="title">someuser</span>.<span class="title">func</span>; </span></div><div class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span>; // 输出 <span class="title">global</span> <span class="params">(被调用函数fuc的上下文是全局)</span></span></div></pre></td></tr></table></figure>
<h3 id="箭头函数的this"><a href="#箭头函数的this" class="headerlink" title="箭头函数的this"></a>箭头函数的this</h3><p>lamda不同，它是在哪被定义，this的上下文就是被定义的地方<br>就算是嵌套箭头，也没有this上下文，默认最外层的上下文</p>
<p>由于没有自己的this，所以bind call等函数也无效 </p>
<p>##　原型<br>js对象分俩种：普通对象和函数对象<br>函数对象： 函数的定义，匿名函数的赋值<br>普通对象：数组，结构体，new function()</p>
<p>一个函数对象可以访问到<code>prototype</code> <code>__proto__</code><br>普通对象只能访问到<code>__proto__</code></p>
<p><code>__proto__</code>指向构造函数的<code>prototype</code>,这形成了原型链(也是es5的继承，属性的访问当prototype没有就会通过<code>__proto__</code>去上级寻找)<br>所以函数对象的<code>__proto__</code>指向的是原型的<code>prototype</code></p>
<p><code>prototype</code>的来源: 1.原型的继承 2.自定义的赋值</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/picture/222.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天看一代码把以前的知识又忘了，现专门记下笔记&lt;/p&gt;
&lt;h2 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="函数和结构" scheme="https://xuecat.github.io/tags/%E5%87%BD%E6%95%B0%E5%92%8C%E7%BB%93%E6%9E%84/"/>
    
      <category term="JS" scheme="https://xuecat.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>WebApi(221)</title>
    <link href="https://xuecat.github.io/2017/04/19/221/"/>
    <id>https://xuecat.github.io/2017/04/19/221/</id>
    <published>2017-04-19T14:36:36.000Z</published>
    <updated>2017-06-06T13:53:08.303Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/picture/221.jpg" alt=""></div></div><div class="group-picture-row"></div></div></div>
<p>webvideo本地枚举文件太恶心了，算了写个服务器来读吧，顺便把avi和rmvb解包写了.</p>
<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><ul>
<li>这里的Controller继承于ApiController,</li>
<li>IE和Firefox发送了不同的Accept报头,导致返回的数据可以是JSON，也可以是XML（感觉太强大了，这都做好了。客户端请求的“application/json”中的Accept报头）</li>
</ul>
<p>路由：<code>/api/{controller}/{id}</code> 在<code>id = RouteParameter.Optional</code>情况下<br>controller匹配控制器名<br>{id} 匹配名称为id的方法参数（即函数的参数名叫id）</p>
<p><code>/api/products</code> <code>products</code>匹配名为ProductsController的控制器。该请求是一个GET请求，因此框架在ProductsController上查找一个名称以<code>GET…</code>开头的方法。</p>
<p>进一步地，这个URI不包含可选的{id}片段，因此，框架查找的是一个不带参数的方法。于是，ProductsController::GetAllProducts满足所有这些需求</p>
<p><strong>同理</strong> 如果是个<code>POST``Put</code>请求，会去找<code>POST``Put</code>开头的方法 以及<code>Delete</code></p>
<p><code>/api/products/1</code> 找到参数名叫id的函数，并把这个传入。<br><strong>同理</strong> <code>/api/products/abc</code>就不行，因为只有GetProductById有个叫id的参数，但是是int，无法转换为string</p>
<p><strong>Post</strong><br>js和c#的完美兼容，直接互相传对象，完全可以解析<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> response = Request.CreateResponse&lt;Product&gt;(HttpStatusCode.Created, item); </div><div class="line"><span class="built_in">string</span> uri = Url.<span class="keyword">Link</span>(<span class="string">"DefaultApi"</span>, <span class="literal">new</span> &#123; id = item.Id &#125;); <span class="comment">//当服务器创建一个资源时，它应当在响应的Location报头中包含新资源的URI。</span></div><div class="line">response.Headers.Location = <span class="literal">new</span> Uri(uri);</div></pre></td></tr></table></figure></p>
<h3 id="WebapiClient"><a href="#WebapiClient" class="headerlink" title="WebapiClient"></a>WebapiClient</h3><p>添加库，用<code>HttpClient</code>设置base uri，设置请求报头。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">HttpResponseMessage response = client.GetAsync(<span class="string">"api/products"</span>).Result;  <span class="comment">// Blocking call（阻塞调用）! </span></div><div class="line"><span class="keyword">if</span> (response.IsSuccessStatusCode) </div><div class="line">&#123; </div><div class="line">    <span class="comment">// Parse the response body. Blocking!</span></div><div class="line">    <span class="comment">// 解析响应体。阻塞！</span></div><div class="line">    <span class="keyword">var</span> products = response.Content.ReadAsAsync&lt;IEnumerable&lt;Product&gt;&gt;().Result; </div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> p <span class="keyword">in</span> products) </div><div class="line">    &#123; </div><div class="line">        Console.WriteLine(<span class="string">"&#123;0&#125;\t&#123;1&#125;;\t&#123;2&#125;"</span>, p.Name, p.Price, p.Category); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">//异步和阻塞注意</span></div><div class="line"><span class="comment">//自动构造结构数据很智能：比如Product有个属性和服务器的不对应，那那个属性将不被赋值，只赋值对应的属性</span></div><div class="line"></div><div class="line">---</div><div class="line"><span class="comment">//post的时候</span></div><div class="line"><span class="comment">// 创建JSON格式化器。</span></div><div class="line">MediaTypeFormatter jsonFormatter = <span class="keyword">new</span> JsonMediaTypeFormatter(); </div><div class="line"></div><div class="line"><span class="comment">// Use the JSON formatter to create the content of the request body.</span></div><div class="line"><span class="comment">// 使用JSON格式化器创建请求体内容。</span></div><div class="line">HttpContent content = <span class="keyword">new</span> ObjectContent&lt;Product&gt;(product, jsonFormatter); </div><div class="line"></div><div class="line"><span class="comment">// Send the request.</span></div><div class="line"><span class="comment">// 发送请求。</span></div><div class="line"><span class="keyword">var</span> resp = client.PostAsync(<span class="string">"api/products"</span>, content).Result;</div><div class="line"><span class="comment">//或者client.PostAsJsonAsync("api/products", gizmo).Result;</span></div></pre></td></tr></table></figure></p>
<p>上面讲了<code>client.GetAsync(&quot;api/products&quot;).Result</code> 是阻塞函数，并不会把控制返回给调用者，这导致一直阻塞（ui线程阻塞）。<br>给出2个解决方法：</p>
<ol>
<li><p><code>async</code>和<code>await</code></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">GetProducts</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>) </span></div><div class="line">&#123; </div><div class="line">    <span class="keyword">try</span> </div><div class="line">    &#123; </div><div class="line">        btnGetProducts.IsEnabled = <span class="literal">false</span>; </div><div class="line"></div><div class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.GetAsync(<span class="string">"api/products"</span>); </div><div class="line">        response.EnsureSuccessStatusCode(); <span class="comment">// Throw on error code（有错误码时报出异常）.</span></div><div class="line"></div><div class="line">        <span class="keyword">var</span> products = <span class="keyword">await</span> response.Content.ReadAsAsync&lt;IEnumerable&lt;Product&gt;&gt;(); </div><div class="line">        _products.CopyFrom(products); </div><div class="line"></div><div class="line">    &#125; </div><div class="line">    <span class="keyword">catch</span> (Newtonsoft.Json.JsonException jEx) </div><div class="line">    &#123; </div><div class="line">        <span class="comment">// This exception indicates a problem deserializing the request body.</span></div><div class="line">        <span class="comment">// 这个异常指明了一个解序列化请求体的问题。</span></div><div class="line">        MessageBox.Show(jEx.Message); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">catch</span> (HttpRequestException ex) </div><div class="line">    &#123; </div><div class="line">        MessageBox.Show(ex.Message); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">finally</span> </div><div class="line">    &#123; </div><div class="line">        btnGetProducts.IsEnabled = <span class="literal">true</span>; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>安装<code>Async Targeting Pack</code> </p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">client.GetAsync(<span class="string">"api/products/2"</span>).ContinueWith((t) =&gt; </div><div class="line">    &#123; </div><div class="line">        if (t.IsFaulted) </div><div class="line">        &#123; </div><div class="line">            MessageBox.<span class="keyword">Show(t.Exception.Message); </span></div><div class="line">            <span class="keyword">btnGetProducts.IsEnabled </span>= true<span class="comment">; </span></div><div class="line">        &#125; </div><div class="line">        else </div><div class="line">        &#123; </div><div class="line">            var response = t.Result<span class="comment">; </span></div><div class="line">            if (response.IsSuccessStatusCode) </div><div class="line">            &#123; </div><div class="line">                response.Content.ReadAsAsync&lt;IEnumerable&lt;Product&gt;&gt;(). </div><div class="line">                    ContinueWith(<span class="built_in">t2</span> =&gt; </div><div class="line">                        &#123; </div><div class="line">                            if (<span class="built_in">t2</span>.IsFaulted) </div><div class="line">                            &#123; </div><div class="line">                                MessageBox.<span class="keyword">Show(t2.Exception.Message); </span></div><div class="line">                                <span class="keyword">btnGetProducts.IsEnabled </span>= true<span class="comment">; </span></div><div class="line">                            &#125; </div><div class="line">                            else </div><div class="line">                            &#123; </div><div class="line">                                var products = <span class="built_in">t2</span>.Result<span class="comment">; </span></div><div class="line">                                _products.CopyFrom(products)<span class="comment">; </span></div><div class="line">                                <span class="keyword">btnGetProducts.IsEnabled </span>= true<span class="comment">; </span></div><div class="line">                            &#125; </div><div class="line">                        &#125;, TaskScheduler.FromCurrentSynchronizationContext())<span class="comment">; </span></div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">    &#125;, TaskScheduler.FromCurrentSynchronizationContext())<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="HttpClient消息处理器"><a href="#HttpClient消息处理器" class="headerlink" title="HttpClient消息处理器"></a>HttpClient消息处理器</h3><p>通过这个我可以把自定义的头处理掉</p>
<h3 id="路由变异"><a href="#路由变异" class="headerlink" title="路由变异"></a>路由变异</h3><p><code>id = RouteParameter.Optional</code>情况下</p>
<p>当路由为 <code>api/{controller}/{action}/{id}</code> 时，<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductsController</span> : <span class="title">ApiController</span> </div><div class="line">&#123; </div><div class="line">    [HttpGet] <span class="comment">//需要显式的指定映射</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Details</span>(<span class="params"><span class="keyword">int</span> id</span>)</span>; <span class="comment">//api/products/details/1</span></div><div class="line"></div><div class="line">    [HttpPost] </div><div class="line">    [ActionName(<span class="string">"Thumbnail"</span>)] <span class="comment">//覆盖动作，这样就转到api/products/thumbnail/id</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddThumbnailImage</span>(<span class="params"><span class="keyword">int</span> id</span>)</span>; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//除此外还有个： [NonAction]属性可以修饰动作，这样框架就不会映射到那个函数</span></div><div class="line"><span class="comment">//[AcceptVerbs("GET", "HEAD")] 允许此方法对get和head的http方法（put/delete等同理）</span></div></pre></td></tr></table></figure></p>
<p>###　异常处理<br>总而言之（exception和error都用最好）：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> message = <span class="keyword">string</span>.Format(<span class="string">"Product with id = 0 not found"</span>);</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> HttpResponseException(</div><div class="line">    Request.CreateErrorResponse(HttpStatusCode.NotFound, message));</div></pre></td></tr></table></figure></p>
<h3 id="自定义消息过滤"><a href="#自定义消息过滤" class="headerlink" title="自定义消息过滤"></a>自定义消息过滤</h3><p>这个要继承<code>DelegatingHandler</code>,服务器在config.MessageHandlers加，客户端在HttpClient加。</p>
<p>唯一的注意http头的加法，客户端随便加，服务器一般如此<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">return</span> <span class="selector-tag">base</span><span class="selector-class">.SendAsync</span>(request, cancellationToken)</div><div class="line"><span class="selector-class">.ContinueWith</span>( (task) =&gt; &#123;</div><div class="line">    HttpResponseMessage response = task<span class="selector-class">.Result</span>;</div><div class="line">    response<span class="selector-class">.Headers</span><span class="selector-class">.Add</span>(_header, <span class="string">"Server"</span>);</div><div class="line">    return response;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Post数据"><a href="#Post数据" class="headerlink" title="Post数据"></a>Post数据</h3><p>有俩种，复合类型和简单类型</p>
<ul>
<li>复合类型(传和接受都是自定义的结构体)</li>
</ul>
<p>服务器对对这类型没啥要求，传入参数是自定义类或结构体就好。</p>
<p>客户端代码必须传<code>application/json</code>格式数据(我用postman测试了下，选raw，传json字符串可以的)</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">string <span class="attr">seri</span> = JsonConvert.SerializeObject(</div><div class="line">                new Product &#123; <span class="attr">Id</span> = <span class="number">1</span>, <span class="attr">Name</span> = <span class="string">"Tomato Soup"</span>, <span class="attr">Category</span> = <span class="string">"Groceries"</span> &#125;);</div><div class="line">HttpResponseMessage <span class="attr">response</span> = client.PostAsync(</div><div class="line">    <span class="string">"api/products/PostPro1/"</span></div><div class="line">    , new StringContent(seri, </div><div class="line">    Encoding.Unicode, <span class="string">"application/json"</span>)).Result;</div></pre></td></tr></table></figure>
<ul>
<li>简单类型(服务器接收的是string int这种类型)</li>
</ul>
<p>服务器要求用<code>[FromBody]</code>修饰参数</p>
<p>客户端要求发送<code>=value</code>的数据（代码和测试真心发俩种数据）</p>
<p>客户端代码,不知道为何必须用<code>{ &quot;&quot;: [&quot;update one&quot;, &quot;update two&quot;, &quot;update three&quot;] }</code>格式数据 且<code>x-www-form-urlencoded</code>它才认同</p>
<p>ajax只需要传上面的格式就好了<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> conte = <span class="keyword">new</span> FormUrlEncodedContent(</div><div class="line">    <span class="keyword">new</span>[]</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">new</span> KeyValuePair&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;(<span class="string">""</span>, <span class="string">"login"</span>)</div><div class="line">    &#125;</div><div class="line">    );</div><div class="line">HttpResponseMessage response = client.PostAsync(</div><div class="line">    <span class="string">"api/products/PostPro1/"</span></div><div class="line">    , conte).Result;</div></pre></td></tr></table></figure></p>
<p>然而我用<code>postman</code>选<code>raw</code>，传<code>=rety</code>就可以传入<code>rety</code>字符进去。<br><strong>angular的js没试过，放以后把</strong> </p>
<h3 id="Upload-Form-Data"><a href="#Upload-Form-Data" class="headerlink" title="Upload Form Data"></a>Upload Form Data</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;HttpResponseMessage&gt; <span class="title">PostFormData</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!Request.Content.IsMimeMultipartContent())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpResponseException(</div><div class="line">            System.Net.HttpStatusCode.UnsupportedMediaType</div><div class="line">            );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">string</span> root = HttpContext.Current.Server.MapPath(<span class="string">"~/App_Data"</span>);</div><div class="line">    <span class="keyword">var</span> provider = <span class="keyword">new</span> MultipartFormDataStreamProvider(root);</div><div class="line"></div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">await</span> Request.Content.ReadAsMultipartAsync(provider);<span class="comment">//读取后，会自动在根目录保存临时文件</span></div><div class="line"></div><div class="line">        <span class="keyword">foreach</span> (MultipartFileData file <span class="keyword">in</span> provider.FileData)</div><div class="line">        &#123;</div><div class="line">            Trace.WriteLine(file.Headers.ContentDisposition.FileName);</div><div class="line">            Trace.WriteLine(<span class="string">"Server file path: "</span> + file.LocalFileName);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> key <span class="keyword">in</span> provider.FormData.AllKeys)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> val <span class="keyword">in</span> provider.FormData.GetValues(key))</div><div class="line">            &#123;</div><div class="line">                Trace.WriteLine(<span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;: &#123;1&#125;"</span>, key, val));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        HttpContext.Current.Request.Files[<span class="number">0</span>].SaveAs(root+<span class="string">"//webservertt.txt"</span>);<span class="comment">//重新按文件名保存</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> Request.CreateResponse(HttpStatusCode.OK);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (System.Exception e)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="限制数据"><a href="#限制数据" class="headerlink" title="限制数据"></a>限制数据</h3><p>如下对结构进行限制<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    [Required]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">decimal</span> Price &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    [Range(<span class="number">0</span>,<span class="number">999</span>)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">double</span> Weight &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//当webapi对一复合类型进行自动转换时，可以用此来判断结构体是否符合限制</span></div><div class="line"><span class="function"><span class="keyword">public</span> HttpResponseMessage <span class="title">Post</span>(<span class="params">Product product</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (ModelState.IsValid)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Do something with the product (not shown).</span></div><div class="line">        <span class="comment">// 用product做一些事（未表示出来）</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpResponseMessage(HttpStatusCode.OK);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpResponseMessage(HttpStatusCode.BadRequest);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Under-Posting和Over-Posting"><a href="#Under-Posting和Over-Posting" class="headerlink" title="Under-Posting和Over-Posting"></a>Under-Posting和Over-Posting</h3><p><code>Under-Posting</code> 当客户端提交时遗漏某些属性，json格式化器会默认给缺失赋值（0）<br><code>Over-Posting</code> 当客户端提交时属性过多时，格式化器会忽略多余的属性</p>
<h3 id="NuGet和Self-Host"><a href="#NuGet和Self-Host" class="headerlink" title="NuGet和Self-Host"></a>NuGet和Self-Host</h3><ol>
<li><code>Microsoft.AspNet.WebApi.OwinSelfHost</code>是自驻留服务安装的</li>
<li>controller接口一定要<code>public</code>，这个搞了我好久哦。</li>
</ol>
<p>单个webapi自己的话(<code>weapi.core</code>是必须的)，要加<code>Microsoft.AspNet.WebApi.WebHost</code><br>这个模式下直接用<code>Global.asax</code>做入口是可以的.(遇见403不怕，只是页面没添加，api接口还是好的)</p>
<p>后来翻资料，还有其它方法可以用<code>Microsoft.Owin.Host.SystemWeb and Microsoft.AspNet.WebApi.Owin</code>;建立<code>Startup</code>入口是可以的。<br>(完全想不明白，为何俩台电脑反应如此不同)</p>
<p>self的要加<code>Microsoft.AspNet.WebApi.OwinSelfHost</code> (这个官方介绍是有俩种方式的，我个人喜欢用owin)<br><code>xcopy /y &quot;$(TargetDir)$(ProjectName).*&quot; &quot;$(ProjectDir)\..\WebHostServerC\bin\Debug&quot;</code></p>
<h4 id="content-root和web-root"><a href="#content-root和web-root" class="headerlink" title="content root和web root"></a>content root和web root</h4><p>要用content root要安装<code>Microsoft.AspNetCore.StaticFiles</code> (<code>Microsoft.AspNetCore.Hosting</code>里面有PhysicalFileProviderd的类)</p>
<h3 id="路由属性和重定向"><a href="#路由属性和重定向" class="headerlink" title="路由属性和重定向"></a>路由属性和重定向</h3><p>一直看他们用<code>Route</code>和<code>RoutePrefix</code>来指定路由,发现调用 <code>MapHttpAttributeRoutes</code>就可以使用了。</p>
<p><a href="https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2" target="_blank" rel="external">https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2</a></p>
<p>路由属性的好处是，可以使用匹配路由([Route(“~/api/authors/{authorId:int}/books”)]public IEnumerable<book> GetByAuthor(int authorId) { … })和父路由</book></p>
<p>先把重定向代码贴了。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>[Route(<span class="string">""</span>), HttpGet]</div><div class="line"><span class="regexp">//</span>[ApiExplorerSettings(IgnoreApi = true)]</div><div class="line"><span class="regexp">//</span>public HttpResponseMessage RedirectToSwaggerUi()</div><div class="line"><span class="regexp">//</span>&#123;</div><div class="line"><span class="regexp">//</span>    var httpResponseMessage = new HttpResponseMessage(HttpStatusCode.Found);</div><div class="line"><span class="regexp">//</span>    httpResponseMessage.Headers.Location = new Uri(<span class="string">"/app"</span>, UriKind.Relative);</div><div class="line"><span class="regexp">//</span>    return httpResponseMessage;</div><div class="line"><span class="regexp">//</span>&#125;</div></pre></td></tr></table></figure></p>
<h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><p><code>Microsoft.Owin.StaticFiles</code><br><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files" target="_blank" rel="external">https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
    
    </summary>
    
      <category term="C#" scheme="https://xuecat.github.io/categories/C/"/>
    
    
      <category term="Asp.Net" scheme="https://xuecat.github.io/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>我的恋情(219)</title>
    <link href="https://xuecat.github.io/2017/03/22/219/"/>
    <id>https://xuecat.github.io/2017/03/22/219/</id>
    <published>2017-03-22T14:39:08.000Z</published>
    <updated>2018-03-17T01:53:39.888Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/picture/219.jpg" alt=""></p>
<p>我喜欢上了一个女孩，我想记录下所有的感受。</p>
<h2 id="2017-12-01"><a href="#2017-12-01" class="headerlink" title="2017/12/01"></a>2017/12/01</h2><pre><code>明明第一次见都完全无所谓，明明完全没感觉的。我也不知道什么时候，为啥改变了！！！！
我该怎么做呢？
</code></pre><h2 id="2017-12-06"><a href="#2017-12-06" class="headerlink" title="2017/12/06"></a>2017/12/06</h2><pre><code>呐，我感觉我脑袋有点坏了。
不敢正视你，不敢靠你太近，
天气好想到你，天气坏也想到你，遇见好看的电影不知觉的便想到你一起看的情景；
买到好玩的游戏也想着安利给你和你一起玩，然后你沉迷其中的场景；
想和你多说话，多看你笑，站在旁边感受你的存在。
</code></pre><h2 id="2017-1-11"><a href="#2017-1-11" class="headerlink" title="2017/1/11"></a>2017/1/11</h2><pre><code>呢！！！！
我有个问题想问下你
我有个朋友，朋友；他最近很困扰。
内心明明很空洞，却又像被某个人占据了一般;吃饭的时候会想，睡觉的时候会想，特别是一个人的时候愈发不能控制这种快要溢出来的感情。
我想这应该就是喜欢上了某人的感觉吧！！
对方是他的同事，是个美人，那么漂亮的人不知道有没有男朋友呢？不，应该已经有了吧！！
身感煎熬，却怯于表达；这份心意被接受还是被拒绝，又该如何面对同事的关系。
我想这便他所困扰的了吧！
</code></pre><h2 id="2018-2-11"><a href="#2018-2-11" class="headerlink" title="2018/2/11"></a>2018/2/11</h2><pre><code>任小姐已经很久都没和我说话了，我开始如此劝服自己：

都说爱情始于外貌，陷入才华，终于人品。
一直以来，我没有收到任何姑娘的爱意，传达的爱意也无一例外的全被拒绝。
你以为这么多年单身只是因为不想找吗？
长得丑，是没有开始的。
</code></pre><h2 id="2018-2-28"><a href="#2018-2-28" class="headerlink" title="2018/2/28"></a>2018/2/28</h2><pre><code>思绪开始越来越频繁那了
不知不觉中已经特别在意任小姐的事情了。
想看到你的脸，想和你聊更多的天，想一直待在旁边。
回家的路上能说上一句话就心动不已，一个人的时候想的全是任小姐。
这种感情就想快要灌满内心溢出来一样的难受。
干脆就索性好好的传递心意。

我想起《上邪》的句子
吾愿与君相知长命无绝衰
山无岭
江水为竭
冬雷震震
夏雨雪
乃敢与君绝
</code></pre><h2 id="2018-3-1"><a href="#2018-3-1" class="headerlink" title="2018/3/1"></a>2018/3/1</h2><pre><code>我对自己的要求很低：我活在世上，无非想要明白些道理，遇见些有趣的事。倘能如我愿，我的一生就算成功的。
</code></pre><h2 id="2018-3-3"><a href="#2018-3-3" class="headerlink" title="2018/3/3"></a>2018/3/3</h2><pre><code>今天父母让我去高新区看套房，问我喜不喜欢，好买给我。
可是我害怕，超害怕啊！！那么大的房子，我一个住我好害怕，以后要是叫个人都没有理我咋办；
想到这里已是满心悲怆；害怕孤独的我，达州买的房我至今也不敢去住。
任小姐！！！！！！！我能和你孤单并行吗？
</code></pre><h2 id="2018-3-5"><a href="#2018-3-5" class="headerlink" title="2018/3/5"></a>2018/3/5</h2><pre><code>我喜欢任小姐，像夏天里疯狂蔓延的藤蔓一样，在心里盘踞着。
回过头来，已经被包围的密不透风，已经什么都无所谓了，工作也好！房子也好！生活也好！全部也好！！求求你们都拿走吧！！
我只想。。。只想。。。只是想和她在一起！！！
今生如果能做好这件事情，我一定无憾了！！！老年后我会躺在摇椅上骄傲说着自己最大的幸福就是遇见她。
已经坏掉了啊！！！我！！！！
喜欢一个人好沉重！！！好心痛！！
</code></pre><h2 id="2018-3-6"><a href="#2018-3-6" class="headerlink" title="2018/3/6"></a>2018/3/6</h2><pre><code>任小姐和其他人说话我会在意，和其他人打闹欢笑，会隐隐さそつつむ
可是这一切看到她的笑容后又被化解了。
我想喜欢应该就是希望她幸福吧！！
</code></pre><h2 id="2018-3-7"><a href="#2018-3-7" class="headerlink" title="2018/3/7"></a>2018/3/7</h2><pre><code>从hy那听说被请吃饭，我很开心，可是却没有下文，我很失落！！！
我一定是个懦弱的人！！！！
掌管姻缘的神明啊！！！能告诉我，我的恋情会有结果吗？
好痛苦！！！！好想哭！！！
这么大了，我第一次如此积虑一件事。

记得每次父亲想磨练我时，我一定会先装作在努力做。
然后抱着母亲故意悲伤的诉苦下。
这时母亲必会帮我，事情也会被解决。
唯独这件事我却不能！！！
</code></pre><h2 id="208-3-8"><a href="#208-3-8" class="headerlink" title="208/3/8"></a>208/3/8</h2><pre><code>我喜欢她，真的好想传达这种感情。
我怕突然这样会吓着她，让她压力大了。
不知道为何，看到她痛苦我内心也会痛苦！！！

我不知道任小姐的内心，也不知道任小姐的想法。
害怕这份火热的内心会灼伤到她！！！
害怕她会对我避而远之！！
我也渴望被了解！！！人心便是这样啊！！
</code></pre><h2 id="2018-3-9"><a href="#2018-3-9" class="headerlink" title="2018/3/9"></a>2018/3/9</h2><pre><code>今天早上的早读又荒废了，现在早读每次都会想到任小姐。
这样的自己，厌恶！唾弃！憎恨！无以复加！！！
索性把这颗心拿掉，那样我一定会毫无痛苦，一定会用心学习。
好想快点逃离这里，远离这里！！或许人不在了就会淡忘吧。
回家呆着也好，换工作也好。hy的外包做完我不能再呆了！！！
</code></pre><h2 id="2018-3-10"><a href="#2018-3-10" class="headerlink" title="2018/3/10"></a>2018/3/10</h2><pre><code>我明明是个人，高傲的，独立特性的。明明是个在父母眼中引以为傲的人！！！
现在的我不知羞耻的写下这些，就像条摇尾祈舍趴在地上的哈巴狗，我还真是龌龊，下贱。
即使心里多么贬低自己，警示自己，还是死性不改的恢复过来！

生而为人，对不起——《被嫌弃的松子一生》
</code></pre><h2 id="2018-3-11"><a href="#2018-3-11" class="headerlink" title="2018/3/11"></a>2018/3/11</h2><pre><code>我又想起太宰治的《人间失格》，或许只有悲怆才能洗涤心灵吧。

以前我并不相信书里的撕心裂肺，着转反侧，为什么一个人能用尽一生来忍受另一个人的不堪？
然而现在的我却已经朝思暮想了！！愿意用尽一且！！！
</code></pre><h2 id="2018-3-12"><a href="#2018-3-12" class="headerlink" title="2018/3/12"></a>2018/3/12</h2><pre><code>我希望有个如你一般的人
如山间清爽的风
如古城温暖的光
从清晨到夜晚
由山野到书房
只要最后是你
就好

我像中了魔咒似的，已经无所谓了！！！
我愿是这世上最卑微的，最低下的，最不起眼的；
只愿能一直见到你。
我能忍受这世上最痛苦的，最劳累的，最讽刺人的；
只想留在你身边。
</code></pre><h2 id="2018-3-13"><a href="#2018-3-13" class="headerlink" title="2018/3/13"></a>2018/3/13</h2><pre><code>拿出了12分的勇气邀请吃饭，还是被拒绝了。她要准备考试了！！！
居然会有种她要是去了雅安，我也会跟随而去的想法！！！
我一定是坏了！！破破烂烂的！
</code></pre><hr>
<pre><code>不能着急，不能慢！！！
太过卑微反而不会珍惜！！
我很想去把她闺蜜都了解完，但是要是她知道了一定会厌恶我。

每天保证和她聊10句以上。
等她考试完，再约。如果带闺蜜再好不过，加闺蜜联系方式！！
</code></pre><h2 id="2018-3-14"><a href="#2018-3-14" class="headerlink" title="2018/3/14"></a>2018/3/14</h2><pre><code>我开始收集斗图，我以前一点都不喜欢这些。我怕和任小姐聊天尴尬，也开始收集这些了！！！！！
撕下脸就撕下！！反正都坏了！！！哪怕破破烂烂！！

和任小姐聊了12句，心里好开心！！！！

晚上表叔家呆了，免不了被说，若真是他说的女孩请吃俩顿饭就行了话，我就不会如此了！！！
或许成都至少3栋别墅的有钱人和我想的不一样。。。
</code></pre><h2 id="2018-3-15"><a href="#2018-3-15" class="headerlink" title="2018/3/15"></a>2018/3/15</h2><pre><code>任小姐今天没来，我开始胡思乱想了；好怕她以后就不理我了。
如果没有了任小姐，我一定会像没了心的行尸走肉，世间游荡！

我记得实笃有个小说《朋友》。
优柔寡断的主人公一直在友情和爱情之间挣扎，不敢道破。
女主也不忍伤害他人的对此沉默不言，不愿选择。最后的大家都崩坏了。
如果我有万分之一让任小姐困扰了，我都不忍心；我更愿意她义正言辞的拒绝我。
</code></pre><hr>
<pre><code>终于她中午来了，她拍脑袋想问题的动作好可爱！！！我都快化了！！
</code></pre><h2 id="2018-3-16"><a href="#2018-3-16" class="headerlink" title="2018/3/16"></a>2018/3/16</h2><pre><code>写日记的频率越来越高了，我已经快抑制不住这份情感！！！
明明这种情感以前被管理的好好的，现在不知最近为何像洪水决堤般，
涌了出来！！呼吸都是急缓的！！

现在甚至想记下她每天的表情，每天的话语，这样我读的时候就会回想起那个时刻的她！
要是这样做的话我一定会被认为是变态吧！！！
昨天晚上做梦又是她！！！！
我还真是个不知羞耻的人！！！
</code></pre><h2 id="2018-3-17"><a href="#2018-3-17" class="headerlink" title="2018/3/17"></a>2018/3/17</h2><pre><code>我在最好的时候遇见你，是我的运气。
我奋不顾身的扑向你，是我的青春。
爱情是渴求回报的。
这样的感情是扭曲的!!

内心分裂成了俩派。
一派想着：就算被当作抹布，在被用的破破烂烂后，丢弃到暗无光日的深渊里，还是依旧希望能在某天被她想起，那时抹布依旧会不计前嫌。
一派想着：放弃吧！不值得；最多在接下的很多个夜晚，凭借眼泪入睡；坚持一下过去就好了。长痛不如短痛。

现在天平中间的我，彷徨迷惘，怅然若失！！
</code></pre><h2 id="2018-3-18"><a href="#2018-3-18" class="headerlink" title="2018/3/18"></a>2018/3/18</h2><pre><code>我已经开始嫉妒，开始独裁，开始愤怒，开始理所当然。
这样的我感觉已经配不上任小姐了。
她应该有自己的选择；不！！是必须有自己的选择！！
我能做的只能是把我的全部展现出来了！！！
剩下的是她的选择了！！

翻出以前的歌听着，如梦初醒般!!(Das zweite Kapitel --やまだ豊)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/picture/219.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我喜欢上了一个女孩，我想记录下所有的感受。&lt;/p&gt;
&lt;h2 id=&quot;2017-12-01&quot;&gt;&lt;a href=&quot;#2017-12-01&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="生活" scheme="https://xuecat.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="学习看书笔记" scheme="https://xuecat.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9C%8B%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap(218)</title>
    <link href="https://xuecat.github.io/2017/03/22/218/"/>
    <id>https://xuecat.github.io/2017/03/22/218/</id>
    <published>2017-03-22T13:56:53.000Z</published>
    <updated>2017-05-22T15:58:18.580Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/picture/218.jpg" alt=""></p>
<p>bootstrap语法太丰富了，完全可以把很多js代码去掉。所以记录下来</p>
<p><a href="http://v3.bootcss.com/components/" target="_blank" rel="external">http://v3.bootcss.com/components/</a><br><a href="http://getbootstrap.com/javascript/#modals-examples" target="_blank" rel="external">http://getbootstrap.com/javascript/#modals-examples</a></p>
<h3 id="ui-bootstrap"><a href="#ui-bootstrap" class="headerlink" title="ui-bootstrap"></a>ui-bootstrap</h3><p>bootstrap的TPLS版本里面有所有组件的html代码.angular最好用这个.<br>然后对于angular使用的是ui-boostrap，这个只是定义了控件，还是要去bootstrap官网去下载bootstrap的源码来。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>它主要是自己的<code>data</code>语法太多了:</p>
<ul>
<li><p><code>data-dismiss=&quot;modal&quot;</code> 如果在<code>modal</code>弹窗加上，那么点击则会关闭弹窗</p>
</li>
<li><p><code>data-toggle=&quot;modal&quot; data-target=&quot;.bs-example-modal-lg&quot;</code>  这样点击按钮就会弹出<code>modal</code>窗口，由于<code>data-target</code>具有css的选择器功能(<code>#id</code>也可以)，所以选择的是class为bs-exampl-modal-lg的元素。</p>
<p>  如：<code>&lt;div class=&quot;modal fade bs-example-modal-sm&quot; tabindex=&quot;-1&quot;&gt;</code> <strong>加上fade类有淡入淡出的特效</strong></p>
</li>
<li><p><code>data-whatever=&quot;&quot;</code> 当一堆按钮要使用同一个模态框时，用这个来传入分别的数据。然而对angular来说完全没必要，毕竟数据绑定了。</p>
</li>
<li><p><code>data-toggle=&quot;dropdown&quot;</code> angular感觉用处不大没细看</p>
</li>
<li><p><code>data-spy=&quot;scroll&quot; data-target=&quot;#navbar-example&quot;</code> 滚动时顺便修改选项</p>
</li>
<li><p><code>data-toggle=&quot;tab&quot;</code> </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;a href="#ejb" tabindex="-1" data-toggle="tab"&gt;//tab项</div><div class="line">&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;div class="tab-pane fade" id="ios"&gt;...&lt;/div&gt;//tab内容</div></pre></td></tr></table></figure>
</li>
<li><p><code>data-toggle=&quot;tooltip&quot; data-placement=&quot;right&quot; title=&quot;Tooltip on right&quot;</code> //表示右边显示tooltip，可以左上下</p>
</li>
<li><p><code>data-container=&quot;body&quot; data-toggle=&quot;popover&quot; data-placement=&quot;left&quot; data-content=&quot;Vivamus sagittis lacus vel augue laoreet rutrum faucibus.&quot;</code> 点击弹出带指定箭头的属性窗口，点击再消失； 多个title=”…”的话弹出窗口会多个标题显示。</p>
</li>
<li><p><code>data-loading-text=&quot;Loading...&quot;</code> 这个我没写全，它展示的效果是点击后显示加载，鼠标禁止，加载完再恢复。</p>
</li>
<li><p><code>data-dismiss=&quot;alert&quot;</code> 这个用于页内嵌入提示框，由于提供各种可使用的格式 <code>alert-warning</code> <code>alert-success</code>。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myAlert"</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">strong</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>结果是成功的。</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>点关闭也确实能(不能也可以加个ng-hide)，但是动画效果不知道咋实现</p>
<ul>
<li><p><code>data-loading-text</code>好是好就是没法配合angular使用，只能自己写.</p>
</li>
<li><p><code>data-toggle=&quot;collapse&quot;</code> 折叠显示内容</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">href</span>=<span class="string">"#collapseExample"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"collapseExample"</span>&gt;</span></div><div class="line">  Link with href</div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#collapseExample"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"collapseExample"</span>&gt;</span></div><div class="line">  Button with data-target</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse"</span> <span class="attr">id</span>=<span class="string">"collapseExample"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></div><div class="line">    ...</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>由于这俩个button链接的是一个折叠内容，点击展开，再点折叠。 里么href和data-target达到了相同效果，我想angular估计只能用data-target</p>
<p>一般 aria-*是识别属性，但是这里<code>aria-expanded=&quot;true&quot;</code>会默认展开内容</p>
<ul>
<li><code>data-ride=&quot;carousel&quot;</code>这是个轮播控件来达到相册的效果，<code>.carousel-caption</code>添加标题显示</li>
</ul>
<h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><p>12网格式<br><code>.col-xs-*</code> Extra small devices (<768px) `.col-sm-*`="" small="" devices="" tabllets(="">=768px)<br><code>.col-md-*</code> Medium devices(&gt;=922px)<br><code>.col-lg-*</code> Large devices(&gt;=1200px)</768px)></p>
<p><code>*-offset-*</code>表示偏移</p>
<p>强制换行用<code>&lt;div class=&quot;row&quot;&gt;</code> 这样即使内部元素也会强制换行</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/picture/218.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;bootstrap语法太丰富了，完全可以把很多js代码去掉。所以记录下来&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://v3.bootcss.com/components/&quot; target
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="前端" scheme="https://xuecat.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="bootstrap" scheme="https://xuecat.github.io/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>js好用代码(217)</title>
    <link href="https://xuecat.github.io/2017/02/28/217/"/>
    <id>https://xuecat.github.io/2017/02/28/217/</id>
    <published>2017-02-28T14:17:40.000Z</published>
    <updated>2017-11-13T13:16:19.895Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/picture/217b.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="/picture/217a.jpg" alt=""></div></div><div class="group-picture-row"></div></div></div>
<h3 id="js-判断俩对象属性是否相同"><a href="#js-判断俩对象属性是否相同" class="headerlink" title="js(判断俩对象属性是否相同)"></a>js(判断俩对象属性是否相同)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsPropertyEqual</span>(<span class="params">obj1, obj2</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (obj1 === obj2) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!(obj1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>) || !(obj2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> obj1) &#123;</div><div class="line">    <span class="keyword">if</span> (obj1.hasOwnProperty(p) &amp;&amp; !obj2.hasOwnProperty(p)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (p <span class="keyword">in</span> obj2) &#123;</div><div class="line">    <span class="keyword">if</span> (obj1.hasOwnProperty(p) &amp;&amp; !obj2.hasOwnProperty(p)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsStructer</span>(<span class="params">data, obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> IsPropertyEqual(obj, <span class="built_in">JSON</span>.parse(data));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="angular-文件选取"><a href="#angular-文件选取" class="headerlink" title="angular(文件选取)"></a>angular(文件选取)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"file"</span> fileread=<span class="string">"app.js"</span> /&gt;</div><div class="line"></div><div class="line">.directive(<span class="string">"fileread"</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        scope: &#123;</div><div class="line">            fileread: <span class="string">"="</span></div><div class="line">        &#125;,</div><div class="line">        link: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attributes</span>) </span>&#123;</div><div class="line">            element.bind(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">changeEvent</span>) </span>&#123;</div><div class="line">                scope.$apply(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    scope.fileread = changeEvent.target.files[<span class="number">0</span>];</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">                reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">etc</span>) </span>&#123;</div><div class="line">                etc.target.result;</div><div class="line">                <span class="comment">//reader.readAsText(scope.fileread);</span></div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<h3 id="文件下载（超好用，本地下载类型的）"><a href="#文件下载（超好用，本地下载类型的）" class="headerlink" title="文件下载（超好用，本地下载类型的）"></a>文件下载（超好用，本地下载类型的）</h3><p><a href="http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js" target="_blank" rel="external">http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js</a> </p>
]]></content>
    
    <summary type="html">
    
      工具代码
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="工具" scheme="https://xuecat.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="JS" scheme="https://xuecat.github.io/tags/JS/"/>
    
      <category term="前端" scheme="https://xuecat.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS(216)</title>
    <link href="https://xuecat.github.io/2017/02/23/216/"/>
    <id>https://xuecat.github.io/2017/02/23/216/</id>
    <published>2017-02-23T12:56:17.000Z</published>
    <updated>2017-11-13T13:16:27.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h2><p>provider的关系 <a href="https://segmentfault.com/a/1190000003096933" target="_blank" rel="external">https://segmentfault.com/a/1190000003096933</a></p>
<h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><p>no-repeat是所有内置指令中优先级最高的。</p>
<p><code>ng-app</code> 指定AngularJS脚步执行作用域<br><code>ng-model</code> 绑定html元素到数据<br><code>ng-init</code> 初始化数据<br><code>ng-if</code>从dom删除元素<br><code>ng-switch</code> 如同switch适用于多个例子，有ngSwitchCase ngSwitchDefault<br><code>ng-hide</code> 从dom隐藏元素<br><code>ng-options</code> 这个有点多，放下面单独列一项<br><code>ng-disabled</code> 绑定数据到html的disabled属性<br><code>ng-show</code> <code>ng-hide</code><br><code>ng-bind</code>  是指定数据，和<code></code>差不多<br><code>ng-cloak</code> 加载时防止代码未加载完而发生的闪烁<br><code>ng-model</code> 是双向绑定, 在<code>ng-repeat</code>中<code>ng-model</code>必须和<code>ng-change</code>连用<br><code>ng-class</code> 绑定css:</p>
<ol>
<li>ng-class=”name” css类绑定变量name</li>
<li>ng-class=”{true: ‘active’, false: ‘inactive’}[isActive]” 变量isActive为true时绑定active，为false时绑定inactive</li>
<li>ng-class=”{‘sty1’: active, ‘sty2’: inactive}” active为true增加sty1,inactive为true增加sty2</li>
<li>ng-class=”[sty1, sty2]”</li>
</ol>
<p><code>ng-include</code>用于包含外部的html文件，包含的内容将作为知指定元素的子节点<br><code>&lt;div ng-include=&quot;&#39;myfile.html&#39;&quot;&gt;</code> 注意：它是一个双引号和一个单引号<br><code>element ng-include=&quot;&#39;filename&#39;&quot; onload=&quot;&quot; autoscroll=&quot;&quot;</code><br><code>&lt;ng-include src=&quot;finelname&quot; onload=&quot;&quot; autoscroll=&quot;&quot;&gt;</code><br>onload 文件载入后执行的表达式<br>autoscroll 是否指定视图的可滚动</p>
<p><code>ng-repeat</code> 它里面有几个属性可以直接放html使用:<br>$index 序列号<br>$first 第一个元素是它是true,其它false ($last同理)<br>$middle 是否在中间<br>$even $index的值是否是偶数<br>$odd $index的值是否是奇数</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">""</span> <span class="attr">ng-init</span>=<span class="string">"qu=1;pr=5"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">ng-model</span>=<span class="string">"qu"</span>&gt;</span><span class="tag">&lt;/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>angular.module(name,[requires],[configfn])</code> 一个参数是获取，一个以上是创建。</p>
<p>先用<code>ng-app</code>指定模块名，再用<code>angular.module</code>创建对应angular的模型。模型是当前元素拥有的作用域。<br>再用<code>ng-controller</code>指定控制名，再用<code>模型名.controller</code>创建对应angular的控制器。控制器是当前元素的控制器<br>最后用<code>$scope</code>来添加要控制的属性</p>
<p>每个模型有个<code>$rootScope</code>是根，是各个controller中scope的桥梁。</p>
<h3 id="angular-extend"><a href="#angular-extend" class="headerlink" title="angular.extend"></a>angular.extend</h3><p>对象第一层拷贝，如果第一层有属性则引用属性，返回结果<br><code>angular.extend(a, b, c) //依次将c和b的第一层属性拷贝给a，如果有属性则引用拷贝过去，返回a</code></p>
<h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><p><code>angular.module(&#39;phonecatApp&#39;, [&#39;phoneList&#39;]);</code> 这个表示<code>phonecatApp</code>是依赖<code>phoneList</code>的；可以引用里面的服务和组件等。<br>但是有个问题就是，在<code>html</code>它会被定义到后面的<code>DOM</code>元素覆盖。</p>
<h3 id="错误认识"><a href="#错误认识" class="headerlink" title="错误认识"></a>错误认识</h3><p><code>ng-repeat</code>和<code>ng-controller</code>不能放到同一元素(这个纠结了好久)，如果放都要用奇淫技巧。</p>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;lastName|lowercase&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>//小写转换</div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;lastName|uppercase&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>//大写转换</div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;lastName|currency&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> //数字格式化为货币格式</div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"x in names | orderBy:'country'"</span> /&gt;</span>//x是结构体有country属性。先按国家排序，再遍历 (angular-phonecat step-6就有个很好的例子，它按照选择来排序)</div><div class="line"></div><div class="line">#### 自定义过滤</div><div class="line">$scope.myfilter = function(item) &#123;return bool&#125;; //这个过滤必须返回bool类型，来表示此元素是否要被过滤掉。更注意的是它只能配合filter</div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"x in names | filter:myfilter"</span> /&gt;</span> //自定义函数过滤</div><div class="line"></div><div class="line">////////此外当想用此来传俩个参数时有个问题</div><div class="line">1.4版本的只能如此</div><div class="line">$scope.myfilter = function(a) &#123;</div><div class="line">    return function(x) &#123; return a==x;&#125;;//这里参数x很关键，返回的必须是`repeat`里面的循环变量,执行时才能访问到它,达到俩个数的效果</div><div class="line">&#125;</div><div class="line"></div><div class="line">1.6版本是支持多个参数的</div><div class="line">直接filter:myfilter(a, b);</div><div class="line">///////</div><div class="line"></div><div class="line">myApp.filter('replace', function() &#123;</div><div class="line">    return function(input, n1, n2) &#123; return datas;&#125;//这个过滤中则必须返回整个的数据。更注意它只能用于指令时，必须返回多个才行。</div><div class="line">&#125;);</div><div class="line">Result: &#123;&#123; yourinput | replace:3:'b' &#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>它封装了很多浏览器东西，来作为自己的内建服务。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">app.service(<span class="string">"customerserver"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.myFunc = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;&#125;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.controller(<span class="string">'customers'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $location, $http, $interval, customerserver</span>) </span>&#123;</div><div class="line">    $location.absUrl();<span class="comment">//当前页面的url</span></div><div class="line">    $http.get(<span class="string">""</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>));//请求数据</span></div><div class="line">    <span class="title">$interval</span>(<span class="params">function(</span>)&#123;&#125;, <span class="number">1000</span>);<span class="comment">//定时器</span></div><div class="line">    customerserver.myFunc(<span class="number">3</span>);<span class="comment">//自定义服务</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//自定义过滤使用自定义服务,注意传入的服务那块的代码</span></div><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line">app.service(<span class="string">'hexafy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.myFunc = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">app.filter(<span class="string">'myFormat'</span>,[<span class="string">'hexafy'</span>, <span class="string">'$location'</span> ,<span class="function"><span class="keyword">function</span>(<span class="params">hexafy,$location</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> $location.absUrl();</div><div class="line">        <span class="keyword">return</span> hexafy.myFunc(x);</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;255|myFormat&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>感觉里面的<code>$odd</code>等是内部的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;table&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"x in names"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-if</span>=<span class="string">"$odd"</span> <span class="attr">style</span>=<span class="string">"background-color:#f1f1f1"</span>&gt;</span></div><div class="line">    &#123;&#123; x.Name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-if</span>=<span class="string">"$even"</span>&gt;</span></div><div class="line">    &#123;&#123; x.Name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-if</span>=<span class="string">"$odd"</span> <span class="attr">style</span>=<span class="string">"background-color:#f1f1f1"</span>&gt;</span></div><div class="line">    &#123;&#123; x.Country &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">ng-if</span>=<span class="string">"$even"</span>&gt;</span></div><div class="line">    &#123;&#123; x.Country &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/table&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>必须先建个前缀代码自己的命名空间, 如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myApp.directive(<span class="string">'ddDrie'</span>, <span class="function"><span class="keyword">function</span> )  =&gt;  &lt;<span class="title">div</span> <span class="title">dd</span>-<span class="title">drie</span>...&gt; //以大写字符为界，前缀必须是小写，命名必须只有一个大写字符。</span></div></pre></td></tr></table></figure></p>
<p>一般属性:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">    .directive(<span class="string">'myDirective'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            restrict: <span class="string">'EA'</span>, <span class="comment">//E标签指令 A属性指令（默认） M注释 Cclass指令</span></div><div class="line">            priority: <span class="number">3</span>,<span class="comment">//优先级</span></div><div class="line">            terminal: <span class="literal">true</span>,<span class="comment">//执行此指令是否停止其它指令</span></div><div class="line">            template: <span class="string">'&lt;h2 class="head"&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;'</span>,<span class="comment">//输出类型</span></div><div class="line">            replace: <span class="literal">true</span>,<span class="comment">//是否替换，就上面的输出类型是否替换上html上的元素。否-html就包含</span></div><div class="line">            scope: <span class="literal">true</span>,<span class="comment">//这个属性传入bool时。默认false，true时会从父作用域创建一个自己的作用域</span></div><div class="line">            controllerAs: <span class="string">'ctrl'</span>,<span class="comment">//这个属性牛逼了。下面的scope例子中，controller自定义的变量只能在template或其他用 ctrl.name 来访问</span></div><div class="line">            bindToController: <span class="literal">true</span>,<span class="comment">//这个组件的属性都被绑定到controller上了而不是scope上面。可以视为继承到了父controller的同名的指定属性</span></div><div class="line">            scope: &#123;</div><div class="line">                <span class="comment">//这些属性要注意，头最好加上命名前缀</span></div><div class="line">                mytest1: <span class="string">'@'</span>, <span class="comment">//解析普通字符，即传入数据当字符处理</span></div><div class="line">                mytest2: <span class="string">'='</span>, <span class="comment">//解析数据，传入数据当数据处理</span></div><div class="line">                mytest3: <span class="string">'&amp;'</span>, <span class="comment">//解析函数, 传入数据当函数</span></div><div class="line">            &#125;,</div><div class="line">        &#125;;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="comment">////////////////scope例子</span></div><div class="line">&lt;body ng-app=<span class="string">"myApp"</span>&gt;</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"mycc"</span>&gt;</span></span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">runoob-directive</span> <span class="attr">runoobst1</span>=<span class="string">"ww"</span> <span class="attr">runoobst2</span>=<span class="string">"name"</span> <span class="attr">runoobst3</span>=<span class="string">"show(3)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">"myApp"</span>, []);</div><div class="line">app.controller(<span class="string">'mycc'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">    $scope.name = <span class="string">'xiecg'</span>;</div><div class="line">    $scope.show = <span class="function"><span class="keyword">function</span>(<span class="params">vvv</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> vvv;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div><div class="line">app.directive(<span class="string">"runoobDirective"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">		scope: &#123;</div><div class="line">			runoobst1: <span class="string">'@'</span>,</div><div class="line">			runoobst2: <span class="string">'='</span>,</div><div class="line">			runoobst3: <span class="string">'&amp;'</span></div><div class="line">		&#125;,</div><div class="line">		controller : [<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">            $scope.name = <span class="string">'this is a xiecg'</span>;<span class="comment">//这个添属性,只能内部访问（想要访问只能用controllerAs属性）。不能当数据传入给runoobst2</span></div><div class="line">            $scope.hehe = <span class="string">"hehe"</span>;</div><div class="line">        &#125;],</div><div class="line">        template : <span class="string">'&lt;p&gt;&#123;&#123;runoobst1&#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123;runoobst2&#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;  &lt;p&gt;&#123;&#123;runoobst3()&#125;&#125;&lt;/p&gt;'</span></div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="全局API"><a href="#全局API" class="headerlink" title="全局API"></a>全局API</h3><p>angular.isString();<br>angular.isNumber();</p>
<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 value 对象 "defaultInput" 并传递数据</span></div><div class="line">mainApp.value(<span class="string">"defaultInput"</span>, <span class="number">5</span>);</div><div class="line"><span class="comment">// 将 "defaultInput" 注入到控制器</span></div><div class="line">mainApp.controller(<span class="string">'CalcController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, CalcService, defaultInput</span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">mainApp.factory(<span class="string">'MathService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">...</span>) </span>&#123; <span class="keyword">return</span> &#123;&#125;; &#125;</div><div class="line"></div><div class="line">mainApp.service(<span class="string">'CalcService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">...</span>) </span>&#123; <span class="keyword">this</span>...=...; &#125;</div><div class="line"></div><div class="line">mainApp.constant(<span class="string">"configParam"</span>, <span class="string">"constant value"</span>);</div><div class="line"></div><div class="line">mainApp.config(<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>) </span>&#123;</div><div class="line">    $provide.provider(<span class="string">'Mprovider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.$get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;&#125;;&#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的注入，除了<code>config</code>有点特殊，其它都可以互相随意注入放置.</p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>router的url：<a href="https://github.com/angular-ui/ui-router/wiki/URL-routing" target="_blank" rel="external">https://github.com/angular-ui/ui-router/wiki/URL-routing</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">url: <span class="string">"/contacts/:contactId"</span></div><div class="line">$stateParams.contactId = <span class="number">42</span>;</div></pre></td></tr></table></figure>
<hr>
<h3 id="module-run"><a href="#module-run" class="headerlink" title="module.run"></a>module.run</h3><p>config执行后就run，然后才是后面的</p>
<p>run可以直接注入config和provided，和controller差不多</p>
<h3 id="resource"><a href="#resource" class="headerlink" title="resource"></a>resource</h3><p>它封装了http，使的webapi连续等。<br>/:resource_id.:format 遇见<code>.</code>它会默认跳过,如:<code>/:resid/:fo.json</code></p>
<ul>
<li>第一个参数是url</li>
<li>第二个是为参数设置默认值；<ul>
<li><ol>
<li>url参数默认值，多余的会被添加到<code>?</code>后，即当做api参数 <code>e.g.给定模板/path/:verb与参数{verb:’greet’,salutation:’Hello’}，将得到URL/path/greet?salutation=Hello</code></li>
</ol>
</li>
<li><ol>
<li>参数以<code>@</code>为前缀,表示此属性的值，从调用第三个参数的结果对象中取对应的属性值。</li>
</ol>
</li>
</ul>
</li>
<li>第三个参数; {action: {method, params, isArray, headers…..}}</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CreditCard = $resource(<span class="string">'/user/:userId/card/:cardId'</span>,</div><div class="line"> &#123;userId:<span class="number">123</span>, cardId:<span class="string">'@id'</span>&#125;, &#123;</div><div class="line">  charge: &#123;method:<span class="string">'POST'</span>, params:&#123;charge:<span class="literal">true</span>&#125;&#125;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> cards = CreditCard.query(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//由于query是get数组，初始url是默认的</span></div><div class="line">  <span class="comment">// GET: /user/123/card</span></div><div class="line">  <span class="comment">// server returns: [ &#123;id:456, number:'1234', name:'Smith'&#125; ];</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> card = cards[<span class="number">0</span>];</div><div class="line">  card.name = <span class="string">"J. Smith"</span>;</div><div class="line">  card.$save();</div><div class="line">  <span class="comment">//上面返回结果了，直接用返回结果继续匹配</span></div><div class="line">  <span class="comment">// POST: /user/123/card/456 &#123;id:456, number:'1234', name:'J. Smith'&#125;</span></div><div class="line">  <span class="comment">// server returns: &#123;id:456, number:'1234', name: 'J. Smith'&#125;;</span></div><div class="line"></div><div class="line">  card.$charge(&#123;amount:<span class="number">9.99</span>&#125;);</div><div class="line">  <span class="comment">// POST: /user/123/card/456?amount=9.99&amp;charge=true &#123;id:456, number:'1234', name:'J. Smith'&#125;</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="modal的用法"><a href="#modal的用法" class="headerlink" title="$modal的用法"></a>$modal的用法</h3><ol>
<li>新版本的angular-ui-bootstrap, 是<code>$uimodal</code>和<code>$uimodalInstance</code></li>
<li>为了传递数据请多用resolve，scope属性会多建一个</li>
<li>注意下面代码中弹出类的三个参数传入</li>
</ol>
<p>angular弹出窗口，使用：<br>templateUrl: 模态窗口地址, 相应html用<code>id</code>标志<br>template：用于显示html标签<br>scope：一个作用域为模态的内容使用（事实上，$modal会创建一个当前作用域的子作用域）默认为$rootScope<br>controller：为$modal指定的控制器，初始化$scope，该控制器可用$modalInstance注入<br>resolve：定义一个成员并将他传递给$modal指定的控制器，相当于routes的一个reslove属性，如果需要传递一个objec对象，需要使用angular.copy()<br>backdrop：控制背景，允许的值：true（默认），false（无背景），“static” - 背景是存在的，但点击模态窗口之外时，模态窗口不关闭<br>keyboard：当按下Esc时，模态对话框是否关闭，默认为ture<br>windowClass：指定一个class并被添加到模态窗口中<br>open方法返回一个实例，该实例具有如下属性：<br>close(result)：关闭模态窗口并传递一个结果<br>dismiss(reason)：撤销模态方法并传递一个原因<br>result：一个契约，当模态窗口被关闭或撤销时传递<br>opened：一个契约，当模态窗口打开并且加载完内容时传递的变量</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"myModalContent.html"</span> /&gt;</span><span class="handlebars"><span class="xml">  <span class="comment">&lt;!--这一段html对应templateUrl属性，注意--&gt;</span></span></span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">h3</span>&gt;</span>I'm a modal!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span>  </div><div class="line">           <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in items"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>  </span></div><div class="line">               <span class="attr">ng-click</span>=<span class="string">"selected.item = item"</span>&gt;<span class="template-variable">&#123;&#123; item &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></div><div class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  </div><div class="line">       Selected: <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="template-variable">&#123;&#123; selected.item &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span>  </span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-click</span>=<span class="string">"ok()"</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span> <span class="attr">ng-click</span>=<span class="string">"cancel()"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">ng-click</span>=<span class="string">"open()"</span>&gt;</span>Open me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'ui.bootstrap.demo'</span>).controller(<span class="string">'ModalInstanceCtrl'</span>, </div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">$scope,$modal, $modalInstance, items</span>) </span>&#123;<span class="comment">// 注意在这里的三个参数和 父类的resolve对应属性</span></div><div class="line">          $scope.items= items;<span class="comment">//这里必须要赋值，才能被html访问</span></div><div class="line">          $scope.selected = &#123;</div><div class="line">            item: items[<span class="number">0</span>] </div><div class="line">          &#125;;</div><div class="line">          $scope.ok = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $modalInstance.close($scope.selected);</div><div class="line">          &#125;;</div><div class="line">          $scope.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $modalInstance.dismiss(<span class="string">'cancel'</span>);</div><div class="line">          &#125;;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">$scope.open = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">        <span class="keyword">var</span> modalInstance = $modal.open(&#123;  </div><div class="line">            templateUrl : <span class="string">'myModalContent.html'</span>,  </div><div class="line">            controller : ModalInstanceCtrl,  </div><div class="line">            resolve : &#123;  </div><div class="line">                items : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">                    <span class="keyword">return</span> $scope.items;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">       </div><div class="line">        modalInstance.result.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;  </div><div class="line">            <span class="built_in">console</span>.log(result);  </div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;  </div><div class="line">            <span class="built_in">console</span>.log(reason);<span class="comment">// 点击空白区域，总会输出backdrop  </span></div><div class="line">            <span class="comment">// click，点击取消，则会暑促cancel  </span></div><div class="line">            $log.info(<span class="string">'Modal dismissed at: '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>());  </div><div class="line">        &#125;);  </div><div class="line">    &#125;;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h4><p><code>ui-router</code>和<code>modal</code>都用到它，我就仔细看了下。<br>路由弹出也好，窗口弹出也是。为了让界面显示前准备好数据而使用这个属性(网络数据获取等)<br>它会在之前被设定好，再注入到控制器中</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">resolve:&#123;</div><div class="line">    user:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            name:<span class="string">"perter"</span>,</div><div class="line">            email:<span class="string">"826415551@qq.com"</span>,</div><div class="line">            age:<span class="string">"18"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">app.controller(<span class="string">'myController'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,user</span>)</span>&#123;</div><div class="line">    $scope.name=user.name;</div><div class="line">    $scope.age=user.age;</div><div class="line">    $scope.email=user.email;</div><div class="line">    $scope.user=user;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><h3 id="ng-options"><a href="#ng-options" class="headerlink" title="ng-options"></a>ng-options</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"selectedItem"</span> <span class="attr">ng-options</span>=<span class="string">"item.name for item in items"</span>&gt;</span><span class="comment">&lt;!--从items选出item,把item.namee作为选项--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"selectedItem"</span> <span class="attr">ng-options</span>=<span class="string">"item.age as item.name for item in items"</span>&gt;</span><span class="comment">&lt;!--从items选出item,把item.namee作为选项；然后绑定的selectedItem值,绑定到item.age上面（比如selectedItem = 2,它会自动替换到age为2的item的name上去）--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"selectedItem"</span> <span class="attr">ng-options</span>=<span class="string">"item.name group by item.age for item in items"</span>&gt;</span><span class="comment">&lt;!--ng对选择多个分组属性。从items选出item,把item.age作为分组标准，把item.namee作为选项--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"selectedItem"</span> <span class="attr">ng-options</span>=<span class="string">"color.name group by color.type disable when color.disabled for color in colors"</span>&gt;</span><span class="comment">&lt;!--同上，只是多了个禁用判断--&gt;</span></div><div class="line"></div><div class="line">$scope.countries = &#123;</div><div class="line">    CN: '中国China',</div><div class="line">    US: '美国United States',</div><div class="line">    UK: '英国United Kingdom',</div><div class="line">    GR: '德国Germany'</div><div class="line">&#125;;</div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"selectedItem"</span> <span class="attr">ng-options</span>=<span class="string">"k as v for (k, v) in countries"</span>&gt;</span><span class="comment">&lt;!--这个允许对象来选择。(k,v)表示这是个k-v类型，k做绑定 v做显示--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"selectedItem"</span> <span class="attr">ng-options</span>=<span class="string">"k as v for (k, v) in countries"</span>&gt;</span><span class="comment">&lt;!----&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"selectedItem"</span> <span class="attr">ng-options</span>=<span class="string">"k as v for (k, v) in countries"</span>&gt;</span><span class="comment">&lt;!----&gt;</span></div></pre></td></tr></table></figure>
<h3 id="track-by"><a href="#track-by" class="headerlink" title="track by"></a>track by</h3><p>单独放一项是因为它和<code>ngoptions</code>/<code>ngrepeat</code>都相关。<br>但是我认为如果有个id我<code>ngoptions</code>何必用这个再去筛选，就没看。<br>主要说下<code>ngrepeat</code></p>
<ul>
<li><ol>
<li><code>&lt;div ng-repeat=&quot;link in links&quot; &gt;&lt;/div&gt;</code>当links=[“1”, “1”, “4”,”4”]时angular会报错，不允许重复<br>这时要么给这些加个属性id用来标志，”link in links track by link.id”<br>要么懒惰的用 “link in links track by $index”</li>
</ol>
</li>
<li><ol>
<li>还是上面的例子，当links发生变化时。必然会让删除已有dom，再重新添加新的。1.2添加的新机制会修改已有的不会重新创建。但是这个就只能用第一种方法了，不能再<code>$index</code>偷懒了。</li>
</ol>
</li>
</ul>
<h3 id="查找dom"><a href="#查找dom" class="headerlink" title="查找dom"></a>查找dom</h3><p><code>jqLite</code>太难用了，返回的还是它的对象。算了。</p>
<p>用这个，正好还可以找到属性对应的dom<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dd = angular.element(<span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>));</div><div class="line"><span class="keyword">var</span> dd = angular.element(<span class="built_in">document</span>.querySelector(<span class="string">'[id="ew"]'</span>));<span class="comment">//id="ew"的dom</span></div><div class="line"></div><div class="line"><span class="comment">//我才发现既然angular.element支持 css的选择器，那就可以用 `.modal-body input`这种css语法来选择呀。。。。。。晕！！太笨了。。</span></div></pre></td></tr></table></figure></p>
<h3 id="this和-scope"><a href="#this和-scope" class="headerlink" title="this和$scope"></a>this和$scope</h3><p>今天想起对比下这俩个：</p>
<ul>
<li><p>用<code>$scope</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dd</span>(<span class="params">$scope</span>) </span>&#123; $scope.test = <span class="string">"dd"</span>; &#125;</div><div class="line"></div><div class="line">&lt;div ng-controller=<span class="string">"dd"</span>&gt; &#123;&#123;test&#125;&#125; &lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>用<code>this</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dd</span>(<span class="params"></span>) </span>&#123; <span class="keyword">var</span> vm = <span class="keyword">this</span>; <span class="keyword">this</span>.test = <span class="string">"dd"</span> ;&#125;</div><div class="line"></div><div class="line">&lt;div ng-controller=<span class="string">"dd as vm"</span>&gt; &#123;&#123;vm.test&#125;&#125;&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用起来一个麻烦js文件，一个麻烦html文件，但效果无异。</p>
<p><strong>但是区别在于</strong><br><code>$scope</code>可以访问到父类的<code>$scope</code>的属性和成员；但是当具有相同属性或成员时，<code>$scope</code>就拥有自己的空间，并不会覆盖。</p>
<p><em>angular思想</em><br><strong>Angular分俩个块儿：配置块和运行块(它更多的在于思想)</strong></p>
<p><strong>配置块</strong><br><code>angular.config</code> 这个会在配置块执行，然而上面的依赖注入只有<code>provider</code>才能在配置块被执行。<br>所以设计<code>provider</code>为初始化设置，<code>$get</code>返回一个对象，让所有注入</p>
<p><code>factory</code>要返回一个对象，所以一般被设为仅仅需要的是一个方法和数据的集合且不需要处理复杂的逻辑的时候<br><code>service</code>当使用在功能控制比较多的service里面</p>
<hr>
<h3 id="provide-decorator"><a href="#provide-decorator" class="headerlink" title="provide.decorator"></a>provide.decorator</h3><p>这个功能用于向已有的服务里面添加新的功能</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Mail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.receiver = <span class="string">''</span>;</div><div class="line">    <span class="keyword">this</span>.body = <span class="string">''</span>;</div><div class="line">    <span class="keyword">this</span>.cc = [];</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Mail.prototype.setReceiver = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.receiver = receiver;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Mail.prototype.setBody = <span class="function"><span class="keyword">function</span>(<span class="params">body</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.body = body;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">angular.module(<span class="string">'A'</span>, []).service(<span class="string">'Mail'</span>, Mail);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'B'</span>, [<span class="string">'A'</span>]).config(<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>) </span>&#123;</div><div class="line">    $provide.decorator(<span class="string">'Mail'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$delegate</span>) </span>&#123;</div><div class="line">        $delegate.addCC = <span class="function"><span class="keyword">function</span>(<span class="params">cc</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.cc.push(cc);</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> $delegate;</div><div class="line">    &#125;);</div><div class="line">&#125;)</div><div class="line">.controller(<span class="string">'TestCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, Mail</span>) </span>&#123;</div><div class="line">    Mail.addCC(<span class="string">'jack'</span>);<span class="comment">//这些mail服务就多了个调用函数</span></div><div class="line">    <span class="built_in">console</span>.log(Mail);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="provider笔记"><a href="#provider笔记" class="headerlink" title="provider笔记"></a>provider笔记</h4><p>初始化必须<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">angular.module()</div><div class="line">.provider(<span class="string">'linkAll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> l1 = <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> l2 = <span class="string">''</span>;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.SetLinkTitle = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">        l1 = v;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.SetLinkUrl = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">        l2 = v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.$get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            linkTitle: l1,</div><div class="line">            linkUrl: l2,</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在config对它访问和在控件对它访问是完全不一样的</span></div><div class="line">config ([<span class="string">'linkAllProvider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">linkAllProvider</span>)</span>&#123; </div><div class="line">    linkAllProvider.SetLinkTitle(<span class="number">3</span>);</div><div class="line">    &#125;]);</div><div class="line"></div><div class="line">controller([<span class="string">'linkAll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">linkAll</span>) </span>&#123;linkAll.linkTitle;&#125;])</div></pre></td></tr></table></figure>
<h3 id="ocLazyLoad"><a href="#ocLazyLoad" class="headerlink" title="ocLazyLoad"></a>ocLazyLoad</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ocLazyLoadProvider.config(&#123;</div><div class="line">            debug: <span class="literal">true</span>, <span class="comment">//官方说这是为了oclazy向控制台输出信息</span></div><div class="line">            serie: <span class="literal">true</span>, <span class="comment">//当modules的多个模块文件全都互相依赖时，为了全部加载而在全局使用</span></div><div class="line">            modules: [&#123;</div><div class="line">                name: <span class="string">'kzts.modules.products.search'</span>,</div><div class="line">                files: [</div><div class="line">                    <span class="string">'/ts/modules/products/search/search.module.js'</span>,</div><div class="line">                    <span class="string">'/ts/modules/products/search/products-search.js'</span>,</div><div class="line">                    <span class="string">'/ts/modules/products/search/products-search-modal-controller.js'</span></div><div class="line">                ],</div><div class="line">                serie: <span class="literal">true</span> <span class="comment">//指定核心模块，当多个模块加载时，保证核心模块先被加载</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                ... <span class="comment">//这些格式如上</span></div><div class="line">            &#125; ]</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="comment">//.....</span></div><div class="line">         resolve: &#123;</div><div class="line">                loadModule: [<span class="string">'$ocLazyLoad'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$ocLazyLoad</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> $ocLazyLoad.load(<span class="string">'errorView'</span>);</div><div class="line">                &#125;]</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h3 id="UI-Router"><a href="#UI-Router" class="headerlink" title="UI-Router"></a>UI-Router</h3><p>跳转方式<br>$state.go()<br>ng-href: 会<code>ng-href=&quot;/av/&quot;</code><br>ui-sref: 这个需要url那边配合 <a href="https://github.com/angular-ui/ui-router/wiki/URL-Routing#url-parameters" target="_blank" rel="external">https://github.com/angular-ui/ui-router/wiki/URL-Routing#url-parameters</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">url: <span class="string">'/users/:id/details/&#123;type&#125;/&#123;repeat:[0-9]+&#125;?from&amp;to'</span></div><div class="line"></div><div class="line"><span class="comment">// Then you navigated your browser to:</span></div><div class="line"><span class="string">'/users/123/details//0'</span></div><div class="line"></div><div class="line"><span class="comment">// Your $stateParams object would be</span></div><div class="line">&#123; id:<span class="string">'123'</span>, type:<span class="string">''</span>, repeat:<span class="string">'0'</span> &#125;</div></pre></td></tr></table></figure></p>
<p>href</p>
<ul>
<li><p>父子路由</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.state(<span class="string">'blog'</span>, ...)</div><div class="line">.state(<span class="string">'blog.index'</span>, ...);</div><div class="line"><span class="comment">//通过名称中的一个`.` 来区分父子路由</span></div><div class="line"></div><div class="line">.state(<span class="string">'list'</span>, &#123;</div><div class="line">    parent: <span class="string">'contacts'</span>, <span class="comment">//指定父路由</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//子路由会继承父路由的依赖注入项</span></div><div class="line">resolve: &#123;rea:...&#125;</div><div class="line">resolve: &#123;reb:...&#125;</div><div class="line">conttroller: <span class="function"><span class="keyword">function</span>(<span class="params">rea, reb</span>) </span>&#123;...&#125;</div><div class="line"></div><div class="line"><span class="comment">//子路由会继承父路由的data属性，并可以重写</span></div><div class="line">$stateProvider.state(<span class="string">'parent'</span>, &#123;</div><div class="line">    data: &#123;...&#125;</div><div class="line">&#125;)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctrl</span>(<span class="params">$state</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log($state.current.data.customData1) <span class="comment">// outputs 5;</span></div><div class="line">    <span class="built_in">console</span>.log($state.current.data.customData2) <span class="comment">// outputs "blue";</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>abstract<br>官方说这个是为了方便定义虚拟的父，有段url是为所有子节点准备。<br>里面必须有<code>ui-view</code></p>
</li>
</ul>
<p><a href="https://github.com/angular-ui/ui-router/wiki/Nested-States-&amp;-Nested-Views" target="_blank" rel="external">https://github.com/angular-ui/ui-router/wiki/Nested-States-&amp;-Nested-Views</a></p>
<ul>
<li>views<br>当一个html出现多个<code>ui-view</code>时使用<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"filters"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"tabledata"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"graph"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$stateProvider</div><div class="line">  .state(<span class="string">'report'</span>,&#123;</div><div class="line">    views: &#123;</div><div class="line">      <span class="string">'filters'</span>: &#123;</div><div class="line">        templateUrl: <span class="string">'report-filters.html'</span>,</div><div class="line">        controller: <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123; ... controller stuff just <span class="keyword">for</span> filters view ... &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="string">'tabledata'</span>: &#123;</div><div class="line">        templateUrl: <span class="string">'report-table.html'</span>,</div><div class="line">        controller: <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123; ... controller stuff just <span class="keyword">for</span> tabledata view ... &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="string">'graph'</span>: &#123;</div><div class="line">        templateUrl: <span class="string">'report-graph.html'</span>,</div><div class="line">        controller: <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123; ... controller stuff just <span class="keyword">for</span> graph view ... &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p>多视图的命名允许使用相对和绝对<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html (root unnamed template) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- contacts.html plugs in here --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"status"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- contacts.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Contacts<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"detail"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- contacts.detail.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Contacts Details<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">$stateProvider</div><div class="line">  .state(<span class="string">'contacts'</span>, &#123;</div><div class="line">    <span class="comment">// 根状态，对应的父模板则是index.html</span></div><div class="line">    <span class="comment">// 所以 contacts.html 将被加载到 index.html 中未命名的 ui-view 中</span></div><div class="line">    templateUrl: <span class="string">'contacts.html'</span>   </div><div class="line">    data: &#123;custom: <span class="number">5</span>&#125;</div><div class="line">  &#125;)</div><div class="line">  .state(<span class="string">'contacts.detail'</span>, &#123;</div><div class="line">    views: &#123;</div><div class="line">        <span class="comment">// 嵌套状态，对应的父模板是 contacts.html</span></div><div class="line"></div><div class="line">        <span class="comment">// 相对命名</span></div><div class="line">        <span class="comment">// contacts.html 中 &lt;div ui-view='detail'/&gt; 将对应下面</span></div><div class="line">        <span class="string">"detail"</span> : &#123; &#125;,   </div><div class="line">         </div><div class="line">        <span class="comment">// 相对命名</span></div><div class="line">        <span class="comment">// 对应 contacts.html 中的未命名 ui-view &lt;div ui-view/&gt;</span></div><div class="line">        <span class="string">""</span> : &#123; &#125;, </div><div class="line"></div><div class="line">        <span class="comment">// 绝对命名</span></div><div class="line">        <span class="comment">// 对应 contacts.detail.html 中 &lt;div ui-view='info'/&gt;</span></div><div class="line">        <span class="string">"info@contacts.detail"</span> : &#123; &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 绝对命名</span></div><div class="line">        <span class="comment">// 对应 contacts.html 中 &lt;div ui-view='detail'/&gt;</span></div><div class="line">        <span class="string">"detail@contacts"</span> : &#123; &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 绝对命名</span></div><div class="line">        <span class="comment">// 对应 contacts.html 中的未命名 ui-view &lt;div ui-view/&gt;</span></div><div class="line">        <span class="string">"@contacts"</span> : &#123; &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 绝对命名</span></div><div class="line">        <span class="comment">// 对应 index.html 中 &lt;div ui-view='status'/&gt; </span></div><div class="line">        <span class="string">"status@"</span> : &#123; &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 绝对命名</span></div><div class="line">        <span class="comment">// 对应 index.html 中 &lt;div ui-view/&gt;</span></div><div class="line">        <span class="string">"@"</span> : &#123; &#125; </div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">$state</span>) </span>&#123;</div><div class="line">      $state.current.data.custom;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>$urlRouterProvider</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$urlRouterProvider.when(<span class="string">''</span>, <span class="string">'/index'</span>);<span class="comment">// 把空路由重定向到 /index</span></div><div class="line">$urlRouterProvider.otherwise(<span class="string">'/index'</span>);<span class="comment">//重定向无效路由</span></div></pre></td></tr></table></figure>
<h2 id="最后给个api查询-：-https-github-com-angular-ui-ui-router-wiki-Quick-Reference"><a href="#最后给个api查询-：-https-github-com-angular-ui-ui-router-wiki-Quick-Reference" class="headerlink" title="最后给个api查询 ##： https://github.com/angular-ui/ui-router/wiki/Quick-Reference"></a>最后给个api查询 ##： <a href="https://github.com/angular-ui/ui-router/wiki/Quick-Reference" target="_blank" rel="external">https://github.com/angular-ui/ui-router/wiki/Quick-Reference</a></h2><h4 id="多个视图"><a href="#多个视图" class="headerlink" title="多个视图"></a>多个视图</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--main.html--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular-ui-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./App2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">data-ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>多ui-view<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"data"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">"myApp"</span>, [<span class="string">"ui.router"</span>]);</div><div class="line">myApp.config(<span class="function"><span class="keyword">function</span> (<span class="params">$stateProvider, $urlRouterProvider</span>) </span>&#123;</div><div class="line">    $urlRouterProvider.when(<span class="string">""</span>, <span class="string">"/home"</span>);</div><div class="line">    $stateProvider.state(<span class="string">"home"</span>, &#123;</div><div class="line">            url: <span class="string">"/home"</span>,</div><div class="line">            views: &#123;</div><div class="line">                <span class="string">""</span>: &#123;</div><div class="line">                    template: <span class="string">"&lt;h1&gt;HELLO!&lt;/h1&gt;"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"chart"</span>: &#123;</div><div class="line">                    template: <span class="string">"chart"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"data"</span>: &#123;</div><div class="line">                    template: <span class="string">"data"</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .state(<span class="string">"index"</span>, &#123;</div><div class="line">            url: <span class="string">"/index"</span>,</div><div class="line">            views: &#123;</div><div class="line">                <span class="string">""</span>: &#123;</div><div class="line">                    template: <span class="string">"&lt;h1&gt;HELLO!&lt;/h1&gt;"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"data"</span>: &#123;</div><div class="line">                    template: <span class="string">"data-index"</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)   </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="多层视图"><a href="#多层视图" class="headerlink" title="多层视图"></a>多层视图</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--main.html--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular-ui-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./App.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">data-ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>AngularJS Home Page (Ui-router Demonstration)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// App.js</span></div><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">"myApp"</span>, [<span class="string">"ui.router"</span>]);</div><div class="line">myApp.config(<span class="function"><span class="keyword">function</span> (<span class="params">$stateProvider, $urlRouterProvider</span>) </span>&#123;</div><div class="line">     $urlRouterProvider.when(<span class="string">""</span>, <span class="string">"/PageTab"</span>); </div><div class="line">     $stateProvider</div><div class="line">        .state(<span class="string">"PageTab"</span>, &#123;       <span class="comment">//这个有个缺点，就是没有默认指定view的显示页。有俩种方法</span></div><div class="line">            url: <span class="string">"/PageTab"</span>,      <span class="comment">//1、 在PageTab里面加$state.transitionTo('PageTab.Page1');来显示指定显示页</span></div><div class="line">            templateUrl: <span class="string">"PageTab.html"</span><span class="comment">//2. 使用abstract,向父view添加abstract=true属性。但是要设置跳转页面when('', '/PageTab/Page1')，因为直接跳转到父页面是无法显示的。</span></div><div class="line">        &#125;)</div><div class="line">        .state(<span class="string">"PageTab.Page1"</span>, &#123;</div><div class="line">            url:<span class="string">"/Page1"</span>,</div><div class="line">            templateUrl: <span class="string">"Page1.html"</span></div><div class="line">        &#125;)</div><div class="line">        .state(<span class="string">"PageTab.Page2"</span>, &#123;</div><div class="line">            url:<span class="string">"/Page2"</span>,</div><div class="line">            templateUrl: <span class="string">"Page2.html"</span></div><div class="line">        &#125;)</div><div class="line">        .state(<span class="string">"PageTab.Page3"</span>, &#123;</div><div class="line">            url:<span class="string">"/Page3"</span>,</div><div class="line">            templateUrl: <span class="string">"Page3.html"</span></div><div class="line">        &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- PageTab.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"width:100px"</span> <span class="attr">ui-sref</span>=<span class="string">".Page1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Page-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"width:100px"</span> <span class="attr">ui-sref</span>=<span class="string">".Page2"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Page-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"width:100px"</span> <span class="attr">ui-sref</span>=<span class="string">".Page3"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Page-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Page1.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page 1 content goes here...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Page2.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page 2 content goes here...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Page3.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page 3 content goes here...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h3><p>可以作过滤使用<br>可以作属性使用<br>还可以指定参数:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">VARBLE: <span class="string">'HI, &#123;name&#125;'</span> <span class="comment">//字典</span></div><div class="line"></div><div class="line">&lt;p translate=<span class="string">"VARBLE"</span> translate-values=<span class="string">"&#123;name:'wq'&#125;"</span> /&gt;<span class="comment">// HI, wq</span></div></pre></td></tr></table></figure></p>
<p><code>translations</code>注册<br><code>preferredLanguage</code>选择默认语言。 等同<code>use</code><br><code>fallbackLanguage</code> 动态切换语言时，先fall再use就好了。</p>
<p><code>useLocalStorage</code> 为了方便快速切换，提供storage来。localstorage依赖cookiestorage。</p>
<p><code>useStaticFilesLoader</code> 使用静态文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$translateProvider.useStaticFilesLoader(&#123;</div><div class="line">    files: [&#123;</div><div class="line">        prefix: <span class="string">'/locale/'</span>,</div><div class="line">        suffix: <span class="string">'tt.json'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        prefix: <span class="string">'/absolute/path/to/locale-'</span>, <span class="comment">//locale-en locale-cn</span></div><div class="line">        suffix: <span class="string">'.json'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">$translateProvider.preferredLanguage(<span class="string">'en'</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Angular&quot;&gt;&lt;a href=&quot;#Angular&quot; class=&quot;headerlink&quot; title=&quot;Angular&quot;&gt;&lt;/a&gt;Angular&lt;/h2&gt;&lt;p&gt;provider的关系 &lt;a href=&quot;https://segmentfault.com/a/11
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="JS" scheme="https://xuecat.github.io/tags/JS/"/>
    
      <category term="学习看书笔记" scheme="https://xuecat.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9C%8B%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="angularjs" scheme="https://xuecat.github.io/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>jquery215</title>
    <link href="https://xuecat.github.io/2017/02/21/215/"/>
    <id>https://xuecat.github.io/2017/02/21/215/</id>
    <published>2017-02-21T14:50:18.000Z</published>
    <updated>2017-02-21T14:51:34.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h3><p>其它不说，hide和show的参数有个speed，可以动画执行显示。<br>toggle来切换元素显示和隐藏,和上面一样也有个speed。</p>
<h3 id="特效"><a href="#特效" class="headerlink" title="特效"></a>特效</h3><p>可以加特效：<br>fade类型的函数是淡入淡出（有透明度）<br>slide类型的函数是滑入滑出<br>animate类型函数。可以设height:’toggle’ (默认情况下，所有的 HTML 元素有一个静态的位置，且是不可移动的。 如果需要改变为，我们需要将元素的 position 属性设置为 relative, fixed, 或 absolute!)</p>
<h3 id="方法链"><a href="#方法链" class="headerlink" title="方法链"></a>方法链</h3><p>jquery方法链<code>$(&quot;#p1&quot;).css(&quot;color&quot;, &quot;red&quot;).slideUp(200).slideDown(&#39;fast&#39;);</code></p>
<h3 id="dom属性获取和设置"><a href="#dom属性获取和设置" class="headerlink" title="dom属性获取和设置"></a>dom属性获取和设置</h3><p>dom获取和设置。<br>text()设置和获取文本，获取会自动连接子文本、<br>html()设置和获取的文本包括html、<br>val()设置和获取value属性值、<br>attr()设置和获取属性对应值，感觉这个可以替换val</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"#runoob"</span>).attr(&#123;</div><div class="line">        <span class="string">"href"</span> : <span class="string">"http://www.runoob.com/jquery"</span>,</div><div class="line">        <span class="string">"title"</span> : <span class="string">"jQuery 教程"</span></div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">"#runoob"</span>).attr(<span class="string">"href"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">i,origValue</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> origValue + <span class="string">"/jquery"</span>; </div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="添加新元素"><a href="#添加新元素" class="headerlink" title="添加新元素"></a>添加新元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendText</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> txt1=<span class="string">"&lt;p&gt;文本。&lt;/p&gt;"</span>;              <span class="comment">// 使用 HTML 标签创建文本</span></div><div class="line">    <span class="keyword">var</span> txt2=$(<span class="string">"&lt;p&gt;&lt;/p&gt;"</span>).text(<span class="string">"文本。"</span>);  <span class="comment">// 使用 jQuery 创建文本</span></div><div class="line">    <span class="keyword">var</span> txt3=<span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</div><div class="line">    txt3.innerHTML=<span class="string">"文本。"</span>;               <span class="comment">// 使用 DOM 创建文本 text with DOM</span></div><div class="line">    $(<span class="string">"body"</span>).append(txt1,txt2,txt3);        <span class="comment">// 追加新元素</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>remove()删除包括本身,接收参数css选择器<br>empty()删除不包括本身,接收参数css选择器</p>
<h3 id="css类设置"><a href="#css类设置" class="headerlink" title="css类设置"></a>css类设置</h3><p>addClass() 添加<br>removeClass()<br>toggleClass() 添加和删除切换<br>css() 设置和返回css <code>css({&quot;background-color&quot;:&quot;yellow&quot;,&quot;font-size&quot;:&quot;200%&quot;});</code></p>
<p>这里css好像只能用类<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h1,h2,p"</span>).addClass(<span class="string">"blue"</span>);</div><div class="line">.blue</div><div class="line">&#123; ... &#125;</div></pre></td></tr></table></figure></p>
<h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><p>outerWidth(true) //包括margin及全部<br>outerWidth()     //不包括margin,包括border及剩下<br>innerWidth()     //不包括border,包括padding及剩下<br>width()          //只包括element<br>高度类似。</p>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>返回数组元素的函数都允许参数返回指定.<br>parent(); 单个元素<br>parents();数组元素,允许参数返回指定<code>parents(&quot;.hehe&quot;)</code><br>parentsUntil(); 数组元素, 返回介于俩个给定元素之间的所有祖先元素，如<code>parentsUntil(&quot;div&quot;);</code><br>children() 数组元素,允许参数返回指定<code>children(&quot;.hehe&quot;)</code><br>find(…) 单个元素,从后代元素寻找,包含自己<br>siblings(); 数组元素,返回被选元素的所有同胞元素，允许参数返回指定<br>next(); 单个元素,返回被选元素下一个同胞元素<br>nextAll(); 数组元素,返回接下来所有同胞元素<br>nextUntil(); 数组元素,返回参数指定元素之间所有接下来的同胞元素<code>nextUntil(&quot;h6&quot;)</code></p>
<p>first(); 返回被选元素第一个元素<br>last(); 返回被选元素最后一个元素<br>eq(); <code>eq(0)</code>就是第一个 <code>eq(1)</code>第二个<br>filter(); 再次过滤 <code>$(&quot;p&quot;).filter(&quot;.url&quot;);</code><br>not(); <code>$(&quot;p&quot;).not(&quot;.url&quot;);</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jquery&quot;&gt;&lt;a href=&quot;#jquery&quot; class=&quot;headerlink&quot; title=&quot;jquery&quot;&gt;&lt;/a&gt;jquery&lt;/h3&gt;&lt;p&gt;其它不说，hide和show的参数有个speed，可以动画执行显示。&lt;br&gt;toggle来切换元素显示和隐藏
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="学习看书笔记" scheme="https://xuecat.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9C%8B%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="https://xuecat.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>css笔记214</title>
    <link href="https://xuecat.github.io/2017/02/18/214/"/>
    <id>https://xuecat.github.io/2017/02/18/214/</id>
    <published>2017-02-18T06:49:37.000Z</published>
    <updated>2017-03-02T12:26:03.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="很多css属性，在IE8之前必须声明-lt-DOCTYPE-gt"><a href="#很多css属性，在IE8之前必须声明-lt-DOCTYPE-gt" class="headerlink" title="很多css属性，在IE8之前必须声明&lt;!DOCTYPE&gt;"></a>很多css属性，在IE8之前必须声明&lt;!DOCTYPE&gt;</h3><h3 id="css选择器构成"><a href="#css选择器构成" class="headerlink" title="css选择器构成"></a>css选择器构成</h3><p>css具有层叠特性，后面属性会掩盖前面属性</p>
<p>css构成：<br>选择器 {属性:值; 属性:值}</p>
<p>属性选择器: html的属性 h1/p 之类</p>
<p>id选择器：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#paral</div><div class="line">&#123;</div><div class="line">    text-align:center;</div><div class="line">    color:red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;p id="paral"&gt;hello&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>class选择器(类名第一个字符不能使用数字):<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.center </div><div class="line">&#123;</div><div class="line">    text-align:center;</div><div class="line">&#125;</div><div class="line">&lt;p class="center"&gt;标题&lt;/p&gt;</div><div class="line"></div><div class="line">p.center/*它还有个嵌套选择器与它长得很像，但完全不同。下面有讲*/</div><div class="line">&#123;</div><div class="line">    text-align:center;</div><div class="line">&#125;</div><div class="line">&lt;p class="center"&gt;这个要居中（且不能缺少class属性）&lt;/p&gt;</div><div class="line">&lt;h1 class="center"&gt;这个不居中&lt;/h1&gt;</div></pre></td></tr></table></figure></p>
<p><code>:</code>选择器:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>:red; <span class="attribute">text-decoration</span>:...&#125;     <span class="comment">/*所有未被访问的链接，一般用于&lt;a/&gt; 但也可用于其他dom，如: &lt;p/&gt;*/</span></div><div class="line"><span class="selector-pseudo">:visited</span>  <span class="comment">/*所有已被访问链接，同上*/</span></div><div class="line"><span class="selector-pseudo">:active</span>     <span class="comment">/*活动链接，同上*/</span></div><div class="line"><span class="selector-pseudo">:hover</span>     <span class="comment">/**/</span></div><div class="line"><span class="selector-pseudo">:focus</span>     <span class="comment">/**/</span></div></pre></td></tr></table></figure></p>
<p>其它选择器：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">/*后代选择器*/</div><div class="line">a p /*a子元素下的p*/</div><div class="line">&#123;</div><div class="line">    color: green;</div><div class="line">&#125;</div><div class="line">ul li /*ul子元素下的li*/</div><div class="line">&#123;</div><div class="line">    background-repeat: no-repeat;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*分组选择器*/</div><div class="line">h1, h2, p</div><div class="line">&#123;...&#125;</div><div class="line"></div><div class="line">table, th, td</div><div class="line">&#123;</div><div class="line">    border: 1px solid black;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*嵌套选择器*/</div><div class="line">.marked</div><div class="line">&#123; background-color: red; &#125;</div><div class="line">.marked p</div><div class="line">&#123; color: white; &#125;</div><div class="line"></div><div class="line">&lt;div class="marked"&gt;&lt;p&gt;ddd&lt;/p&gt;&lt;/div&gt;/*class为marked的元素，其子元素为p的会得到此css属性*/</div><div class="line"></div><div class="line">/*子元素选择器*/</div><div class="line">div&gt;p</div><div class="line">&#123; background-color: yellow; &#125; /*它会严格按照div&gt;p的层次顺序来找元素*/</div><div class="line"></div><div class="line">/*相邻兄弟选择器*/</div><div class="line">div+p+p</div><div class="line">&#123; background-color: yellow; &#125; /*它只会让div第二个相邻p元素的style改变*/</div><div class="line"></div><div class="line">/*普通相邻兄弟选择器*/</div><div class="line">div~p</div><div class="line">&#123; background-color: yellow; &#125; /*上面的选择器只能选择一个，这个会把所有具有此关系的元素选上*/</div><div class="line"></div><div class="line">/*属性选择器*/</div><div class="line">[title]</div><div class="line">&#123; color: blue; &#125; /*选择具有title属性的元素*/</div><div class="line"></div><div class="line">[title=runoob]</div><div class="line">&#123; color: blue; &#125; /*选择title属性的值为runoob的元素*/</div><div class="line"></div><div class="line">[title~=hello]</div><div class="line">&#123; color: blue; &#125; /*选择title属性的值包含有hello单词的元素,即hello有空格隔开就算包含*/</div><div class="line"></div><div class="line">[title|=hello]</div><div class="line">&#123; color: blue; &#125; /*选择title属性的值包含有hello的元素,只要有hello出现就行*/</div></pre></td></tr></table></figure></p>
<h3 id="插入样式表"><a href="#插入样式表" class="headerlink" title="插入样式表"></a>插入样式表</h3><p>外部插入样式表：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>内部插入样式表：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">hr</span> &#123;<span class="attribute">color</span>:sienna;&#125;</div><div class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>内联样式：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:sienna;margin-left:20px"</span>&gt;</span>this is<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>多重样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h3</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">color</span>:red;</div><div class="line">    <span class="attribute">text-align</span>:left;</div><div class="line">    <span class="attribute">font-size</span>:<span class="number">8pt</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h3</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">text-align</span>:right;</div><div class="line">    <span class="attribute">font-size</span>:<span class="number">20pt</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它们将会重叠成一个。</p>
<p>层叠次序：</p>
<p>内联样式 &gt; 内部样式 &gt; 外部样式 &gt; 浏览器缺省设置<br>这些层叠会继续替换和补充。</p>
<p>###　属性<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">background-repeat: no-repeat|repeat-x|repeat-y;/*背景图片重复平铺的方向*/</div><div class="line">text-decoration: overline|line-through|underline;/*文字的横线位置(上方，中，下方)*/</div><div class="line">text-transform: uppercase|lowercase|capitalize;/*文字转换(大写，小写，首字母大写)*/</div><div class="line">text-indent: *px;/*文本第一行的缩进*/</div><div class="line">font-size: *em;/*为避免ie无法调整文本问题，使用em单位代替*/</div><div class="line">a: link &#123;color:#FF0000;text-decoration:underline;&#125;</div><div class="line">list-style-type: circle|square|upper-roman|lower-alpha;/*列表标题 无序和有序*/</div><div class="line">border: 25px solid green;</div><div class="line">border-style: dotted|dashed|solid|double|groove|ridge|inset|outset;/*电线框、虚线框、实线、俩个边界、3d沟(有四个重载函数：上、右、下、左；上、左右、下；上下、左右；四边)*/</div><div class="line">margin: /*重载：上、右、下、左；上、左右、下；上下、左右；四边;;auto中心对齐*/</div><div class="line">Padding: /*同上*/</div><div class="line">display: inline|block; /*只需要宽度，不强制换行；占用全部宽高，前后换行*/</div><div class="line">position: fixed|relative|absolute /*相对浏览器窗口；相对自己的定位；相对父元素的定位。配合z-index来重叠*/</div></pre></td></tr></table></figure></p>
<h3 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h3><p>从外到内： Margin  Border  Padding  Content</p>
<h3 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">none</span>;<span class="comment">/*隐藏某个元素，且元素不会占用任何空间*/</span></div><div class="line"><span class="selector-tag">visibility</span>: <span class="selector-tag">hidden</span>;<span class="comment">/*隐藏元素，但是隐藏的元素任占用与未隐藏前一样的空间*/</span></div></pre></td></tr></table></figure>
<h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>这个也是个选择器<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">p:first-child /*这个会指定到第一个p元素*/</div><div class="line">&#123; color: blue; &#125;</div><div class="line">p &gt; i:first-child /*第一个为p的子元素的i*/</div><div class="line">&#123; color: blue; &#125;</div><div class="line">&lt;p&gt;I am a &lt;i&gt;zhege&lt;/i&gt; man. I am a &lt;i&gt;strong&lt;/i&gt; man.&lt;/p&gt;</div><div class="line">&lt;p&gt;I am a &lt;i&gt;zhege&lt;/i&gt; man. I am a &lt;i&gt;strong&lt;/i&gt; man.&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.button </div><div class="line">&#123;</div><div class="line">    background-color: #4caf50;</div><div class="line">&#125;</div><div class="line">.button2</div><div class="line">&#123;</div><div class="line">    color: white;</div><div class="line">&#125;</div><div class="line">&lt;button class="button button2" /&gt; /*这样就具有俩个属性了*/</div></pre></td></tr></table></figure>
<h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><p>这儿类名字限定了，必须如此。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.dropdown</span> &#123;&#125; <span class="comment">/* 容器 &lt;div&gt; - 需要定位下拉内容 */</span></div><div class="line"><span class="selector-class">.dropbtn</span> &#123;&#125; <span class="comment">/* 下拉按钮样式 */</span></div><div class="line"><span class="selector-class">.dropdown-content</span> &#123;&#125; <span class="comment">/* 下拉内容 (默认隐藏) */</span></div><div class="line"></div><div class="line"><span class="comment">/* 下拉菜单的链接 */</span></div><div class="line"><span class="selector-class">.dropdown-content</span> <span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="attribute">color</span>: black;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">16px</span>;</div><div class="line">    <span class="attribute">text-decoration</span>: none;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 鼠标移上去后修改下拉菜单链接颜色 */</span></div><div class="line"><span class="selector-class">.dropdown-content</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 在鼠标移上去后显示下拉菜单 */</span></div><div class="line"><span class="selector-class">.dropdown</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.dropdown-content</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 当下拉内容显示后修改下拉按钮的背景颜色 */</span></div><div class="line"><span class="selector-class">.dropdown</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.dropbtn</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#3e8e41</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>设置透明:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">opacity</span>: <span class="number">0.4</span>; <span class="attribute">filter</span>: <span class="built_in">alpha</span>(opcity=1)&#125; <span class="comment">/*一般是0.0-1.0,越小越透明。ie8和早期版本是0-100,越小越透明*/</span></div></pre></td></tr></table></figure></p>
<p>拼合:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span><span class="selector-class">.home</span> </div><div class="line">&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">46px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">44px</span>;<span class="comment">/*上面是指定显示图片的高宽*/</span></div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(...) <span class="number">0</span> <span class="number">0</span>;<span class="comment">/*指定显示图片的路径和位置left top*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="图片廊"><a href="#图片廊" class="headerlink" title="图片廊"></a>图片廊</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"responsive"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"img_fjords.jpg"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.runoob.com/wp-content/uploads/2016/04/img_fjords.jpg"</span> <span class="attr">alt</span>=<span class="string">"Trolltunga Norway"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>这里添加图片文本描述<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="css3"><a href="#css3" class="headerlink" title="css3"></a>css3</h2><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p>圆角: border-radius<br>阴影：border-shadow<br>图片: border-image<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#round</span></div><div class="line">&#123;</div><div class="line">	<span class="attribute">-webkit-border-image</span>:<span class="built_in">url</span>(border.png) <span class="number">30</span> <span class="number">30</span> round; <span class="comment">/* Safari 5 and older */</span></div><div class="line">	<span class="attribute">-o-border-image</span>:<span class="built_in">url</span>(border.png) <span class="number">30</span> <span class="number">30</span> round; <span class="comment">/* Opera */</span></div><div class="line">	<span class="attribute">border-image</span>:<span class="built_in">url</span>(border.png) <span class="number">30</span> <span class="number">30</span> round;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;很多css属性，在IE8之前必须声明-lt-DOCTYPE-gt&quot;&gt;&lt;a href=&quot;#很多css属性，在IE8之前必须声明-lt-DOCTYPE-gt&quot; class=&quot;headerlink&quot; title=&quot;很多css属性，在IE8之前必须声明&amp;lt;!DOCTY
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="学习看书笔记" scheme="https://xuecat.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9C%8B%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="https://xuecat.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://xuecat.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>DockPanelSuite213</title>
    <link href="https://xuecat.github.io/2017/02/16/213/"/>
    <id>https://xuecat.github.io/2017/02/16/213/</id>
    <published>2017-02-16T15:05:38.000Z</published>
    <updated>2017-03-22T14:46:02.856Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/picture/213.jpg" alt=""></p>
<p>深读了后，不得不说太佩服作者了。</p>
<p>1、 MainForm去掉SetSplashScreen函数，去掉开始的登录显示。</p>
<p>2、 Measures.cs 这里修改拖拽的最小边界</p>
<p>3、 DockPanel.DockDragHandler.cs里的DockIndicator就是拖拽显示的小坐标<br>这里面的TestDrop函数处理拖拽过程中小坐标的停靠，以及拖拽过程的阴影。<br>RefreshChanges处理是否显示停靠阴影。</p>
<p>4、 结构<br>panel是整个的大框架，里面由dockwindow构成；<br>dockwindow有6种：停靠，中间的docment，上，下，左，右。<br>dockwindow由dockpane构成，表示分布的窗口。</p>
<p>最后dockcontent整合所有的事件及pane被继承下去。</p>
<p>5、 <strong>一开始的就可以设置。</strong> 我调试了很久，发现这个程序有另外个模式，把所有的DockAreas加上docment（即保证dockcontent.cs的DockAreas的set那）<br>这样中间那块就会被panel填充，就可以支持全布局了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/picture/213.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;深读了后，不得不说太佩服作者了。&lt;/p&gt;
&lt;p&gt;1、 MainForm去掉SetSplashScreen函数，去掉开始的登录显示。&lt;/p&gt;
&lt;p&gt;2、 Measures.cs 这里修改拖拽
    
    </summary>
    
      <category term="C#" scheme="https://xuecat.github.io/categories/C/"/>
    
    
      <category term="dockpane" scheme="https://xuecat.github.io/tags/dockpane/"/>
    
      <category term="winform" scheme="https://xuecat.github.io/tags/winform/"/>
    
  </entry>
  
  <entry>
    <title>c++日常(212)</title>
    <link href="https://xuecat.github.io/2017/02/11/212/"/>
    <id>https://xuecat.github.io/2017/02/11/212/</id>
    <published>2017-02-11T07:22:46.000Z</published>
    <updated>2018-01-25T12:54:09.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="for循环写法"><a href="#for循环写法" class="headerlink" title="for循环写法"></a>for循环写法</h3> <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;)</div><div class="line">&#123; &#125;</div></pre></td></tr></table></figure>
<p> 常数级的循环只能这样写了，感觉还好吧。</p>
 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> p[<span class="number">5</span>];</div><div class="line"><span class="function"><span class="keyword">for</span> <span class="title">each</span><span class="params">(<span class="keyword">int</span> i in p)</span></span></div></pre></td></tr></table></figure>
<p> 这个常数级的循环真心没法优雅，留着以后再试试吧。</p>
<h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3> <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> pa = <span class="number">4</span>;</div><div class="line"><span class="keyword">int</span> *p[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">p[<span class="number">0</span>] = &amp;pa;</div><div class="line"><span class="keyword">int</span> **pp[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">pp[<span class="number">0</span>] = &amp;p[<span class="number">0</span>];</div></pre></td></tr></table></figure>
<p> 这是数组，不是指针</p>
<h3 id="RVO和NRVO"><a href="#RVO和NRVO" class="headerlink" title="RVO和NRVO"></a>RVO和NRVO</h3><p>Return Value Optimization 返回值优化<br>Named Return Value Optimization 命名返回值优化</p>
 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> BigObject</div><div class="line">&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">BigObject <span class="title">foo</span><span class="params">()</span> </span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">return</span> BigObject(); <span class="comment">// RVO </span></div><div class="line">   <span class="comment">//以前看effective的时候讲了这里要产生临时变量</span></div><div class="line">   <span class="comment">//然后再执行拷贝函数</span></div><div class="line">   <span class="comment">//现在编译器智能了，它会优化这一段，自动去掉临时变量，只会走一次构造函数 </span></div><div class="line">   <span class="comment">//即 BigObject tt = fOO(); 这个过程只会调用一次构造函数(vs2015 release debug都只走一次)</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BigObject <span class="title">bar</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  BigObject localObj;</div><div class="line">  <span class="keyword">return</span> localObj; <span class="comment">// NRVO</span></div><div class="line">  <span class="comment">//同上，以前的技术只支持匿名变量的优化，现在高档了，支持实名变量的优化</span></div><div class="line">  <span class="comment">//即 BigObject tt = bar(); vs2015 release 下只走一次构造函数，debug下 走一次构造函数，走一次拷贝函数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="变长参数传递"><a href="#变长参数传递" class="headerlink" title="变长参数传递"></a>变长参数传递</h3><p>  一开始我想用<code>va_list</code>，但是感觉一点都不酷就google了下.<br>  让我惊讶的是vs15支持三点运算符(和js不同，它的符号放后面)</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... arg&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">funa</span><span class="params">(T t, arg... ars)</span></span></div><div class="line">&#123;</div><div class="line">fuu(ars...);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fuu</span><span class="params">(<span class="keyword">int</span> t, ...)</span><span class="comment">//牛逼，自动解构，这里</span></span></div><div class="line">&#123;</div><div class="line">va_list <span class="built_in">list</span>;</div><div class="line">va_start(<span class="built_in">list</span>, t);</div><div class="line"><span class="keyword">int</span> arg = va_arg(<span class="built_in">list</span>, <span class="keyword">int</span>);<span class="comment">//这里是3 funa抢一个， t抢一个</span></div><div class="line"> va_end(<span class="built_in">list</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">funa(<span class="number">1</span>, <span class="number">2</span>, ,<span class="number">3</span> , <span class="string">"afdf"</span>);</div></pre></td></tr></table></figure>
<h3 id="c-11-decltype"><a href="#c-11-decltype" class="headerlink" title="c++11 decltype"></a>c++11 decltype</h3><p>  动态类型:<br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ci = <span class="number">3</span>， &amp;cj=ci;</div><div class="line"><span class="keyword">decltype</span>(ci) d;<span class="comment">//这是个int</span></div><div class="line"><span class="keyword">decltype</span>(cj) f = d;<span class="comment">//这是个int&amp;,必须初始化</span></div></pre></td></tr></table></figure></p>
<p>  他的动态类型已经可以和<code>auto</code>媲美了。但有点意思的是它对括号敏感<br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">2</span>, f = <span class="number">3</span>;</div><div class="line"><span class="keyword">decltype</span>((a)) b = f; <span class="comment">//b是int&amp;类型</span></div><div class="line"><span class="keyword">decltype</span>(((a))) d = f;<span class="comment">//d也是int&amp;类型</span></div></pre></td></tr></table></figure></p>
<p>  <code>decltype(func())</code>并不会执行<code>func</code>函数,只是要它返回类型推导</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;for循环写法&quot;&gt;&lt;a href=&quot;#for循环写法&quot; class=&quot;headerlink&quot; title=&quot;for循环写法&quot;&gt;&lt;/a&gt;for循环写法&lt;/h3&gt; &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
      <category term="函数和结构" scheme="https://xuecat.github.io/tags/%E5%87%BD%E6%95%B0%E5%92%8C%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>effective javsscript(211)</title>
    <link href="https://xuecat.github.io/2017/02/11/211/"/>
    <id>https://xuecat.github.io/2017/02/11/211/</id>
    <published>2017-02-11T07:15:38.000Z</published>
    <updated>2017-12-20T15:09:25.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js的值类型和引用类型"><a href="#js的值类型和引用类型" class="headerlink" title="js的值类型和引用类型"></a>js的值类型和引用类型</h2><p>值类型：数值、布尔、null、undefined<br>引用类型：对象、数组、函数</p>
<h3 id="js的值类型和引用类型-1"><a href="#js的值类型和引用类型-1" class="headerlink" title="js的值类型和引用类型"></a>js的值类型和引用类型</h3><p>值类型：数值、布尔、null、undefined<br>引用类型：对象、数组、函数</p>
<h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><p><code>typeof</code> 返回字符串<br><code>instanceof</code> 后接类型，返回bool</p>
<h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><ol>
<li>(1+2)+”3” //“33”</li>
<li><p>当多个运算符被重载时，js会盲目的选择valueOf; 所以要么明确重载一个，要么保证重载的俩个值相同。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hh"</span>;</div><div class="line">    &#125;,</div><div class="line">    valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">12</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//或者 obj.prototype.toString = function () ...</span></div><div class="line"><span class="string">"object:"</span> + obj;<span class="comment">//"object:17"</span></div></pre></td></tr></table></figure>
</li>
<li><p>真值运算；if、|| 、&amp;&amp;需要布尔的运算<br>js有7个假值：false、0、-0、””、NaN、null、undefined；</p>
</li>
</ol>
<h3 id="的强制转换"><a href="#的强制转换" class="headerlink" title="== 的强制转换"></a>== 的强制转换</h3><table>
<thead>
<tr>
<th>Param1</th>
<th style="text-align:center">Param2</th>
<th style="text-align:right">Force Format</th>
</tr>
</thead>
<tbody>
<tr>
<td>null</td>
<td style="text-align:center">undefined</td>
<td style="text-align:right">不转换，总返回true</td>
</tr>
<tr>
<td>null or undefined</td>
<td style="text-align:center">非null、非undefined</td>
<td style="text-align:right">不转换，总返回false</td>
</tr>
<tr>
<td>原始类型</td>
<td style="text-align:center">Date对象、非Date对象</td>
<td style="text-align:right">原始类型转换为数字，Date对象（优先toString）、非Date对象(优先valueOf)转换为原始类型</td>
</tr>
<tr>
<td>原始类型</td>
<td style="text-align:center">原始类型</td>
<td style="text-align:right">将原始类型转换为数字</td>
</tr>
</tbody>
</table>
<h3 id="Unicode字符"><a href="#Unicode字符" class="headerlink" title="Unicode字符"></a>Unicode字符</h3><ol>
<li>js字符串由16位代码单元组成，而不是由unicode代码点组成。</li>
<li>js使用俩个代码单元表示16位以上的unicode代码点，称为代码对。</li>
<li>代码对甩开了字符串元素计数，length、charAt、charCodeAt方法以及正则表达式模式。</li>
</ol>
<h3 id="字符串Trick"><a href="#字符串Trick" class="headerlink" title="字符串Trick"></a>字符串Trick</h3><pre><code>它字符串的构造
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> tt= <span class="string">'as'</span>;</div><div class="line"><span class="keyword">let</span> at = <span class="string">`aa<span class="subst">$&#123;tt&#125;</span>`</span><span class="comment">//注意这不是单引号</span></div></pre></td></tr></table></figure>
</code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeSandwich</span>(<span class="params">maigc</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">filling</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> maigc + <span class="string">" and "</span> + filling;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> make;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = makeSandwich(<span class="string">"peanut butter"</span>);</div><div class="line">f(<span class="string">"jelly"</span>);<span class="comment">//"peanut butter and jelly"</span></div></pre></td></tr></table></figure>
<p>立即调用函数表达式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wara</span>(<span class="params">a</span>) </span>&#123;</div><div class="line"> <span class="keyword">var</span> result = [];</div><div class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n = a.length; i &lt; n; i++) &#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</div><div class="line">    result[j] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> a[j];&#125;;</div><div class="line">  &#125;)(i);</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="变量声明提升"><a href="#变量声明提升" class="headerlink" title="变量声明提升"></a>变量声明提升</h3><p>js对变量的作用域是函数级的，不是块级的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trime</span>(<span class="params">header</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; n = header; i &lt; n; i++)</div><div class="line">    ...</div><div class="line">    for (<span class="keyword">var</span> i = <span class="number">0</span>; n = header; i &lt; n; i++)</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="comment">//上面的i,n其实只申明了一次，剩下的都是同一个而已。js的变量提升可以视为会把声明自动放到函数开头。</span></div></pre></td></tr></table></figure></p>
<h3 id="命名函数"><a href="#命名函数" class="headerlink" title="命名函数"></a>命名函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) ...</span></div><div class="line"><span class="title">function</span> <span class="title">test</span>(<span class="params"></span>) &#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) ... //在此函数里访问<span class="title">f</span>，就只会是这个<span class="title">f</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以建议少用命名函数，多用匿名函数。</p>
<h3 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h3><ol>
<li>书上的建议是不要用它创建变量，同名变量会导致访问相同地址的变量</li>
<li>间接调用eval函数；<br><code>(0,eval)(src)</code> 0值无意义以达到强制使用间接调用的目的。src是传入给eval的参数。</li>
</ol>
<h3 id="call和apply"><a href="#call和apply" class="headerlink" title="call和apply"></a>call和apply</h3><p>obj.temprorary = f;<br>var result = obj.temprorary(arg1, arg2);<br>delete obj.temprorary;<br>当想使用其他对象的某个属性时，这种方法不仅别扭，而且相当危险。<br>所以有了call和apply</p>
<p>apply只是让数组变成多个参数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> df = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="keyword">var</span> vf = <span class="function"><span class="keyword">function</span>(<span class="params">a1, a2, a3</span>) </span>&#123; <span class="keyword">return</span> (a1+a2+a3)/<span class="number">3</span>;&#125;</div><div class="line">vf.apply(vf, df)</div></pre></td></tr></table></figure></p>
<h3 id="js函数有个arguments的默认参数，也是数组。所以默认支持变长参数函数。"><a href="#js函数有个arguments的默认参数，也是数组。所以默认支持变长参数函数。" class="headerlink" title="js函数有个arguments的默认参数，也是数组。所以默认支持变长参数函数。"></a>js函数有个arguments的默认参数，也是数组。所以默认支持变长参数函数。</h3><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> buffer = &#123;</div><div class="line"> entries: [],</div><div class="line"> add: <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.entries.push(s);</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> sourc = [<span class="string">"874"</span>, <span class="string">"-"</span>, <span class="string">"53443"</span>];</div><div class="line">sourc.forEach(buffer.add.bind(buffer)) <span class="comment">//保证buffer.add函数的接受者就是buffer对象</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">simple</span>(<span class="params">pro, dom, path</span>) </span>&#123;</div><div class="line"> <span class="keyword">return</span> pro + <span class="string">"://"</span> + dom + <span class="string">"/"</span> + path;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> ul = apath.map(simple.bind(<span class="literal">null</span>, <span class="string">"http"</span>, <span class="string">"ff"</span>));<span class="comment">//["http://ff/we", "http://ff/er", "http://ff/rt"]</span></div><div class="line"><span class="comment">//bind第一个参数提供接受者的值，其余参数提供给给新函数的所有参数。</span></div></pre></td></tr></table></figure>
<h3 id="使构造函数与new无关"><a href="#使构造函数与new无关" class="headerlink" title="使构造函数与new无关"></a>使构造函数与new无关</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一般我们写构造函数时都喜欢，传入参数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, password</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.password = password;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> x = User(<span class="string">"test"</span>, <span class="string">"demo"</span>);<span class="comment">//这样做虽然可以成功，但是也会产生多余的全局变量name和password</span></div><div class="line"></div><div class="line"><span class="comment">//避免有俩种方法，要么  var x = new User("test", "demo")</span></div><div class="line"><span class="comment">//所以要这么写函数，加不加new都可以</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, password</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> User))</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(name, password);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.password = password;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="将状态存储到示例对象而不是原型对象"><a href="#将状态存储到示例对象而不是原型对象" class="headerlink" title="将状态存储到示例对象而不是原型对象"></a>将状态存储到示例对象而不是原型对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.value = x;</div><div class="line">&#125;</div><div class="line">Tree.prototype = &#123;</div><div class="line">    children: [],</div><div class="line">    addChild: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.children.push(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> left = <span class="keyword">new</span> Tree(<span class="number">2</span>);</div><div class="line">left.addChild(<span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> right = <span class="keyword">new</span> Tree(<span class="number">6</span>);</div><div class="line">right.addChild(<span class="number">4</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> top = <span class="keyword">new</span> Tree(<span class="number">7</span>);</div><div class="line">top.addChild(left);</div><div class="line">top.addChild(right);</div><div class="line">top.children; <span class="comment">//[1,4,left,right] 这样会多出俩个对象。所以把children放入成员变量是最好</span></div></pre></td></tr></table></figure>
<h3 id="this隐式绑定问题"><a href="#this隐式绑定问题" class="headerlink" title="this隐式绑定问题"></a>this隐式绑定问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CSVReader</span>(<span class="params">sep</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.regexp = ...;</div><div class="line">&#125;</div><div class="line">CSVReader.prototype.read = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lines = str.trim().split(<span class="regexp">/\n/</span>);</div><div class="line">    <span class="keyword">return</span> lines.map(<span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> line.split(<span class="keyword">this</span>.regexp);<span class="comment">//此处本来是想访问CSVReader的regexp，但是实际访问的是lines的</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//改法加bind，或者 var self = this; .... self.regexp;</span></div></pre></td></tr></table></figure>
<h3 id="在子类的构造函数中调用父类的构造函数"><a href="#在子类的构造函数中调用父类的构造函数" class="headerlink" title="在子类的构造函数中调用父类的构造函数"></a>在子类的构造函数中调用父类的构造函数</h3><p>继承可以用Object.Create<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Shape.call(<span class="keyword">this</span>); <span class="comment">//call super constructor.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</div><div class="line">Rectangle.prototype.constructor = Rectangle;</div><div class="line"><span class="comment">//这样能创造新的链</span></div><div class="line"></div><div class="line"><span class="comment">//如果不想使用新链</span></div><div class="line"><span class="keyword">var</span> sp = <span class="keyword">new</span> Shape()</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.create(sp)<span class="comment">//b的链指向sp</span></div></pre></td></tr></table></figure></p>
<p><strong>注意不要让子类属性和父类属性重名，这样会导致冲突访问同一属性。</strong><br><strong>避免继承标准类</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cls1</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cls2</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    cls1.call(<span class="keyword">this</span>, name);<span class="comment">//感觉使用call来传递继承要比直接用prototype方便。 cls2.prototype = Object.create(cls1.prototype);</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> tt = <span class="keyword">new</span> cls2(<span class="string">"ss"</span>);</div><div class="line">tt.show();<span class="comment">//ss</span></div></pre></td></tr></table></figure></p>
<h3 id="猴子补丁"><a href="#猴子补丁" class="headerlink" title="猴子补丁"></a>猴子补丁</h3><p>由于平台的不同有些对属性的修改可能会导致覆盖,应该如此<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.map !== <span class="string">"function"</span>) &#123;</div><div class="line">    <span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">f, thisArg</span>) </span>&#123;</div><div class="line">        ...;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用object实例直接构造轻量级字典"><a href="#使用object实例直接构造轻量级字典" class="headerlink" title="使用object实例直接构造轻量级字典"></a>使用object实例直接构造轻量级字典</h3><p>书上建议使用实例来增加属性，而不是原型的prototype.<br>这样保证for in的正确执行<br>不建议用for in来循环数组,（特别是数字类型的数组；即使用[]，但是遍历的变量是字符型）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dict = &#123;&#125;;</div><div class="line">dict.alice = <span class="number">23</span>;</div><div class="line">dict.bob = <span class="number">4</span>;</div><div class="line">dict.ttt = <span class="number">6</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> dict) &#123;</div><div class="line">    ...<span class="comment">//循环遍历dict的属性,字符类型</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用null原型防止原型污染"><a href="#使用null原型防止原型污染" class="headerlink" title="使用null原型防止原型污染"></a>使用null原型防止原型污染</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">c.prototype = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> c();</div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(o) === <span class="literal">null</span><span class="comment">//false</span></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="number">0</span>) === <span class="built_in">Object</span>.prototype;<span class="comment">//true</span></div><div class="line"><span class="comment">//这个并不会成为真正的null，要如下设置</span></div><div class="line"><span class="keyword">var</span> o = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="number">0</span>) === <span class="literal">null</span>;<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h3 id="使用hasOwnProperty避免原型污染"><a href="#使用hasOwnProperty避免原型污染" class="headerlink" title="使用hasOwnProperty避免原型污染"></a>使用hasOwnProperty避免原型污染</h3><p>即使是个空的对象，也继承了大量属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dict = &#123;&#125;;</div><div class="line"><span class="string">"alice"</span> <span class="keyword">in</span> dict;   <span class="comment">//false</span></div><div class="line"><span class="string">"toString"</span> <span class="keyword">in</span> dict;<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>为了避免空对象的判断，可以使用hasOwnProperty<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dict.hasOwnProperty(<span class="string">"toString"</span>);<span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<h3 id="使用数组而不要用字典来存储有序集合"><a href="#使用数组而不要用字典来存储有序集合" class="headerlink" title="使用数组而不要用字典来存储有序集合"></a>使用数组而不要用字典来存储有序集合</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ht = [&#123;name:<span class="string">"q"</span>,number:<span class="number">1</span>&#125;,&#123;name:<span class="string">"w"</span>,number:<span class="number">2</span>&#125;,&#123;name:<span class="string">"e"</span>,number:<span class="number">3</span>&#125;];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> tn <span class="keyword">in</span> ht) &#123;</div><div class="line"> <span class="built_in">console</span>.log(tn);</div><div class="line"> <span class="built_in">console</span>.log(ht[tn]);</div><div class="line">&#125;</div><div class="line"><span class="comment">//当前平台的输出是：0 &#123;name:"q",number:1&#125; 1 &#123;name:"w",number:2&#125; 2 &#123;name:"e",number:3&#125;</span></div></pre></td></tr></table></figure>
<p>书上说，for…in 在此类数组中它由环境的不同可能会选择不同的顺序来枚举对象。<br>所以即使以上写法可以，也建议使用普通的循环。</p>
<h3 id="js的属性"><a href="#js的属性" class="headerlink" title="js的属性"></a>js的属性</h3><h4 id="属性点访问和方括号访问"><a href="#属性点访问和方括号访问" class="headerlink" title="属性点访问和方括号访问"></a>属性点访问和方括号访问</h4><p>属性允许字符和变量</p>
<blockquote>
<p>点访问只能访问字符属性<br>方括号访问访问字符时<strong>obj[‘pro’]</strong>,访问变量时<strong>obj[ele]</strong></p>
<p>一般属性的字符定义(括号定义必须是字符)：obj.pro = …; obj[‘pro’]=…<br>变量定义 obj[ele]= …</p>
</blockquote>
<h4 id="枚举性"><a href="#枚举性" class="headerlink" title="枚举性"></a>枚举性</h4><p>对于对象来说，属性有可枚举和不可枚举<br>默认从<code>prototype</code>来的是可枚举的<br>不可枚举一般用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(a, <span class="string">'sex'</span>, &#123;</div><div class="line">    value: <span class="string">'man'</span>,</div><div class="line">    enumerable: <span class="literal">false</span></div><div class="line">&#125;)<span class="comment">//给a对象加个sex属性，不能枚举</span></div></pre></td></tr></table></figure></p>
<p>当属性可枚举时：for…in能遍历出来。Object.keys()能遍历出来(数组非数字属性也能遍历出来)<br>当属性不可枚举: 只有Object.getOwnPropertyNames()能遍历出来, 和 …in语句</p>
<h4 id="创建位置"><a href="#创建位置" class="headerlink" title="创建位置"></a>创建位置</h4><p>属性明确创建:<br>构造函数<code>this.a=...</code><br>创建的对象obj定义属性<code>obj.a=...</code></p>
<p>原型创建:<br>创建的对象obj定义属性<code>obj.prototype.a=...</code><br>class体内定义的属性</p>
<p>由于依附在原型上，<code>hasOwnProperty</code>,<code>for...in</code>, <code>getOwnPropertyNames</code>都会无法返回对应属性，只有<code>...in</code>语句能返回</p>
<h3 id="不要在prototype中增加可枚举的属性"><a href="#不要在prototype中增加可枚举的属性" class="headerlink" title="不要在prototype中增加可枚举的属性"></a>不要在prototype中增加可枚举的属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.allkey = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</div><div class="line">        result.push(key);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;<span class="comment">//这样会导致多个属性allkey ["allkey", "a", "b", "c"]</span></div></pre></td></tr></table></figure>
<p>书上解决方法是封装成函数，如果实在要封装成属性，要如下写。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">"allKeys"</span>, &#123;</div><div class="line">    value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> result = [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</div><div class="line">            result.push(key);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;,</div><div class="line">    writable: <span class="literal">true</span>,</div><div class="line">    enumerable: <span class="literal">false</span>,</div><div class="line">    configurable: <span class="literal">true</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我感觉这样写又会污染原型，还是写成函数好点。</p>
<h3 id="避免枚举期间修改对象"><a href="#避免枚举期间修改对象" class="headerlink" title="避免枚举期间修改对象"></a>避免枚举期间修改对象</h3><p>直接引用书上：</p>
<ol>
<li>当使用for…in循环枚举一个对象的属性时，确保不要修改对象。</li>
<li>当迭代一个对象是，如果该对象可能会在循环期间被改变，应该使用while或for来代替for…in</li>
</ol>
<h3 id="迭代方法优于循环"><a href="#迭代方法优于循环" class="headerlink" title="迭代方法优于循环"></a>迭代方法优于循环</h3><p>书上建议多用 forEach/map/every 这些本身的迭代方法来代替循环。</p>
<h3 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h3><p>es5上没有默认值得设定<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Element</span>(<span class="params">w, h</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.w = w || <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>.h = h || <span class="number">2</span>;</div><div class="line">&#125;<span class="comment">//如上确实在Element(),会返回默认值。但是在Element(0, 0)时就不会。</span></div><div class="line"></div><div class="line"><span class="comment">//所以该如下写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Element</span>(<span class="params">w, h</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.w = w === <span class="literal">undefined</span> ? <span class="number">1</span> : w;</div><div class="line">    <span class="keyword">this</span>.h = h === <span class="literal">undefined</span> ? <span class="number">2</span> : h;</div><div class="line">&#125;<span class="comment">//如上在Element(0, 0)页可以正常运行</span></div></pre></td></tr></table></figure></p>
<h3 id="编写方法支持方法链"><a href="#编写方法支持方法链" class="headerlink" title="编写方法支持方法链"></a>编写方法支持方法链</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeBasic</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>)</div><div class="line">              .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</div><div class="line">              .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>)</div><div class="line">              .replace(<span class="regexp">/"/g</span>, <span class="string">"&amp;quot;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="不要阻塞I-O事件队列"><a href="#不要阻塞I-O事件队列" class="headerlink" title="不要阻塞I/O事件队列"></a>不要阻塞I/O事件队列</h3><p>如下代码会一直等待下载文件完成才继续执行下去，会导致卡死情况。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = downloadSync(<span class="string">"http://example.com/file.txt"</span>);</div><div class="line"><span class="built_in">console</span>.log(text);</div></pre></td></tr></table></figure></p>
<p>如下代码就不会阻塞了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = downloadSync(<span class="string">"http://example.com/file.txt"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(text);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="对异步循环使用递归"><a href="#对异步循环使用递归" class="headerlink" title="对异步循环使用递归"></a>对异步循环使用递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">urls</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (...) &#123;</div><div class="line">        ...<span class="comment">//下载文件，异步代码</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>循环的代码会等待下载执行完成。用递归函数在时间循环的单独轮次中执行迭代。</p>
<h3 id="js递归函数同步调用太多次会导致失败（承受力各不同，几百次以上）"><a href="#js递归函数同步调用太多次会导致失败（承受力各不同，几百次以上）" class="headerlink" title="js递归函数同步调用太多次会导致失败（承受力各不同，几百次以上）"></a>js递归函数同步调用太多次会导致失败（承受力各不同，几百次以上）</h3><h3 id="私有公有静态属性的访问"><a href="#私有公有静态属性的访问" class="headerlink" title="私有公有静态属性的访问"></a>私有公有静态属性的访问</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = name;<span class="comment">//私有属性</span></div><div class="line">  <span class="keyword">this</span>.name = name; <span class="comment">//公有属性</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> name; &#125;<span class="comment">//私有方法</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getHName</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> name; &#125;<span class="comment">//私有方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">user.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name;&#125;<span class="comment">//公有方法</span></div><div class="line">user.name = <span class="string">'ss'</span>; <span class="comment">//静态属性</span></div><div class="line">user.sname = <span class="string">'ss'</span>; <span class="comment">//静态属性</span></div><div class="line">user.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name&#125;<span class="comment">//静态方法</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> user(<span class="string">'cats'</span>);</div></pre></td></tr></table></figure>
<ul>
<li><p>调用公有方法、公有属性，必须先实例化对象。公有方法不能调用私有方法和静态方法。<br>(即：ws.sname 不可以 user.sanme可以; )</p>
</li>
<li><p>静态方法和静态属性无需示例化可访问 (user.name可以)</p>
</li>
<li>私有方法和属性外部无法访问 (user.getHName() 不可以 user().getHName() 不可以)</li>
</ul>
<h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'cat'</span>);&#125;</div><div class="line">getName();<span class="comment">//cat</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'dog'</span>); &#125;</div><div class="line">getName();<span class="comment">//dog</span></div></pre></td></tr></table></figure>
<ul>
<li>js解释器会把声明提升到作用域（函数作用域）的最前面（即使写代码时放在最后也会被提升）</li>
</ul>
<h3 id="new的优先级"><a href="#new的优先级" class="headerlink" title="new的优先级"></a>new的优先级</h3><p>用上面现成的代码做例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> user.getName();</div><div class="line"><span class="comment">//由于点运算优先级大于new无参数列表 这个就可视为 new (user.getName)();</span></div><div class="line"><span class="comment">//这下就成了将getName作为了构造函数来创建对象</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> user().getName();</div><div class="line"><span class="comment">//new有参数列表和点运算同级，所以可视为 (new user()).getName();</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">foo.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">3</span>);&#125;</div><div class="line">foo.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>);&#125;</div><div class="line"><span class="keyword">new</span> foo.getName();<span class="comment">//3</span></div><div class="line"><span class="keyword">new</span> foo().getName();<span class="comment">//4</span></div></pre></td></tr></table></figure>
<h3 id="import的括号"><a href="#import的括号" class="headerlink" title="import的括号"></a>import的括号</h3><p> 未加括号是默认引用：<code>import A from &#39;./A&#39;</code> <code>import Mya from &#39;./A&#39;</code>;这样引用的都是<code>A</code>文件里的<code>export default</code></p>
<p> 加了括号是指定引用：<br>  <code>import {Som} from &#39;./A&#39;</code>,<code>A</code>文件里必须有个<code>export Som ...</code>导出</p>
<p>  <code>import A, { Mya, Som} from &#39;./A&#39;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;js的值类型和引用类型&quot;&gt;&lt;a href=&quot;#js的值类型和引用类型&quot; class=&quot;headerlink&quot; title=&quot;js的值类型和引用类型&quot;&gt;&lt;/a&gt;js的值类型和引用类型&lt;/h2&gt;&lt;p&gt;值类型：数值、布尔、null、undefined&lt;br&gt;引用类型：对
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="JS" scheme="https://xuecat.github.io/tags/JS/"/>
    
      <category term="学习看书笔记" scheme="https://xuecat.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9C%8B%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#文件和其它(210)</title>
    <link href="https://xuecat.github.io/2017/01/21/210/"/>
    <id>https://xuecat.github.io/2017/01/21/210/</id>
    <published>2017-01-21T08:36:46.000Z</published>
    <updated>2017-11-13T13:16:58.066Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/picture/210.jpg" alt=""></div></div><div class="group-picture-row"></div></div></div>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>File和FileInfo<br>Directory和DirectoryInfo<br>如果执行单一调用使用静态类<br>如果执行一系列调用使用Info类</p>
<p><code>new FileInfo(@&quot;C:\Log.txt&quot;)</code>使用<code>@</code>前缀表示字符按字面意义解释，没有的话就要用<code>\\</code>代替<code>\</code>了。</p>
<p><code>FileStream</code>读写的是字节数组<br><code>StreamReader</code> <code>StreamWriter</code>读写的是字符数组<br>字符和数组的转换用<code>Decoder</code>和<code>Encoder</code></p>
<h3 id="文本格式"><a href="#文本格式" class="headerlink" title="文本格式"></a>文本格式</h3><ol>
<li><p>XPath 用于检索xml的节点。</p>
</li>
<li><p>创建xml的话，我绝对linq的XDocument要比XmlDocument好用多了。</p>
</li>
</ol>
<h3 id="LINQ"><a href="#LINQ" class="headerlink" title="LINQ"></a>LINQ</h3><p>它的实现是基于<code>IEnumerable&lt;T&gt;</code>接口,所以下面俩句是等效的。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">string</span>[] name = &#123;<span class="string">"n1"</span>, <span class="string">"n2"</span>, <span class="string">"n3"</span>, <span class="string">"n4"</span> &#125;;</div><div class="line"><span class="keyword">var</span> dd = name.Where(n =&gt; n.StartsWith(<span class="string">"n"</span>));</div><div class="line"><span class="keyword">var</span> hh = <span class="keyword">from</span> n <span class="keyword">in</span> name <span class="keyword">where</span> n.StartsWith(<span class="string">"n"</span>) <span class="keyword">select</span> n;</div></pre></td></tr></table></figure></p>
<h4 id="orderby"><a href="#orderby" class="headerlink" title="orderby"></a>orderby</h4><p>暂时就个字母，其它排列再看看吧<br><code>var hh = from n in name where n.StartsWith(&quot;n&quot;) orderby n select n;</code>升序排列结果<br><code>var hh = from n in name where n.StartsWith(&quot;n&quot;) orderby n descending select n;</code>降序排列结果</p>
<h5 id="多级排序，并返回新建立的对象。"><a href="#多级排序，并返回新建立的对象。" class="headerlink" title="多级排序，并返回新建立的对象。"></a>多级排序，并返回新建立的对象。</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> queryResults = from <span class="built_in">c</span> <span class="keyword">in</span> customers</div><div class="line"> orderby <span class="built_in">c</span>.<span class="type">Region</span>, <span class="built_in">c</span>.<span class="type">Country</span> descending, <span class="built_in">c</span>.<span class="type">City</span></div><div class="line"> select new &#123; <span class="built_in">c</span>.<span class="type">ID</span>, <span class="built_in">c</span>.<span class="type">Region</span>, <span class="built_in">c</span>.<span class="type">Country</span>, <span class="built_in">c</span>.<span class="type">City</span> &#125;;</div></pre></td></tr></table></figure>
<h4 id="查找不重复"><a href="#查找不重复" class="headerlink" title="查找不重复"></a>查找不重复</h4><p>会按照Region属性选出所有，Distinct来排除重复。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">qu</span> = name.Select(c =&gt; c.Region).<span class="keyword">Distinct</span>();</div><div class="line"><span class="keyword">var</span> <span class="keyword">qu</span> = (from c <span class="keyword">in</span> name select c.Region).<span class="keyword">Distinct</span>();</div></pre></td></tr></table></figure></p>
<h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>书上的例子是，按照国家来比较销量<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> q =</div><div class="line"> from c <span class="keyword">in</span> customers</div><div class="line"> <span class="keyword">group</span> c <span class="keyword">by</span> c.Region <span class="keyword">into</span> cg</div><div class="line"> <span class="keyword">select</span> <span class="literal">new</span> &#123; TotalSaleds = cg.<span class="keyword">Sum</span>(c =&gt; c.Sales), Region = cg.Key&#125;</div><div class="line"></div><div class="line"> <span class="comment">//第二句by后面指定重组使用的Key，再重新组合成cg（即后面cg.Key）</span></div><div class="line"> <span class="comment">//第三句</span></div></pre></td></tr></table></figure></p>
<h4 id="join查询"><a href="#join查询" class="headerlink" title="join查询"></a>join查询</h4><p>书上的例子是把客户列表(customers)和订单列表(orders)中，id相同的找出重组合<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> q =</div><div class="line"> <span class="keyword">from</span> c <span class="keyword">in</span> customers</div><div class="line"> <span class="keyword">join</span> o <span class="keyword">in</span> orders <span class="keyword">on</span> c.ID <span class="keyword">equals</span> o.ID</div><div class="line"> <span class="keyword">select</span> <span class="keyword">new</span> <span class="comment">&#123;c.ID, c.City&#125;</span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
    
    </summary>
    
      <category term="C#" scheme="https://xuecat.github.io/categories/C/"/>
    
    
      <category term="杂项" scheme="https://xuecat.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
      <category term="函数和结构" scheme="https://xuecat.github.io/tags/%E5%87%BD%E6%95%B0%E5%92%8C%E7%BB%93%E6%9E%84/"/>
    
      <category term="学习看书笔记" scheme="https://xuecat.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9C%8B%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
